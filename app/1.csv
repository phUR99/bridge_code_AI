id,code,description,tags
1,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
5,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
6,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
7,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
8,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
9,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
10,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
11,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
12,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
13,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
14,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
15,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
16,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
17,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
18,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
19,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
20,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
21,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
22,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
23,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
24,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
25,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
26,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
27,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
28,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
29,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
30,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
31,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
32,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
33,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
34,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
35,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
36,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
37,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
38,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
39,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
40,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
41,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
42,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
43,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
44,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
45,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
46,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
47,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
48,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
49,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
50,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
51,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
52,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
53,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
54,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
55,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
56,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
57,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
58,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
59,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
60,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
61,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
62,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
63,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
64,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
65,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
66,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
67,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
68,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
69,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
70,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
71,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
72,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
73,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
74,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
75,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
76,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
77,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
78,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
79,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
80,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
81,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
82,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
83,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
84,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
85,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
86,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
87,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
88,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
89,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
90,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
91,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
92,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
93,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
94,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
95,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
96,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
97,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
98,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
99,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
100,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
101,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
102,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
103,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
104,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
105,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
106,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
107,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
108,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
109,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
110,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
111,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
112,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
113,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
114,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
115,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
116,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
117,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
118,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
119,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
120,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
121,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
122,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
123,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
124,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
125,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
126,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
127,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
128,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
129,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
130,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
131,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
132,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
133,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
134,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
135,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
136,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
137,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
138,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
139,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
140,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
141,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
142,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
143,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
144,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
145,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
146,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
147,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
148,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
149,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
150,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
151,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
152,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
153,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
154,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
155,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
156,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
157,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
158,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
159,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
160,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
161,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
162,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
163,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
164,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
165,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
166,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
167,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
168,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
169,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
170,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
171,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
172,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
173,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
174,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
175,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
176,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
177,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
178,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
179,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
180,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
181,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
182,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
183,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
184,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
185,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
186,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
187,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
188,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
189,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
190,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
191,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
192,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
193,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
194,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
195,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
196,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
197,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
198,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
199,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
200,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
201,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
202,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
203,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
204,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
205,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
206,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
207,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
208,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
209,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
210,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
211,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
212,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
213,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
214,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
215,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
216,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
217,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
218,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
219,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
220,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
221,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
222,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
223,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
224,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
225,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
226,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
227,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
228,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
229,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
230,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
231,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
232,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
233,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
234,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
235,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
236,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
237,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
238,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
239,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
240,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
241,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
242,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
243,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
244,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
245,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
246,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
247,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
248,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
249,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
250,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
251,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
252,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
253,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
254,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
255,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
256,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
257,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
258,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
259,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
260,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
261,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
262,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
263,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
264,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
265,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
266,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
267,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
268,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
269,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
270,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
271,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
272,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
273,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
274,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
275,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
276,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
277,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
278,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
279,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
280,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
281,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
282,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
283,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
284,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
285,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
286,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
287,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
288,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
289,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
290,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
291,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
292,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
293,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
294,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
295,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
296,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
297,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
298,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
299,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
300,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
301,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
302,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
303,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
304,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
305,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
306,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
307,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
308,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
309,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
310,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
311,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
312,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
313,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
314,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
315,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
316,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
317,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
318,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
319,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
320,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
321,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
322,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
323,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
324,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
325,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
326,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
327,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
328,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
329,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
330,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
331,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
332,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
333,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
334,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
335,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
336,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
337,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
338,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
339,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
340,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
341,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
342,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
343,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
344,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
345,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
346,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
347,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
348,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
349,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
350,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
351,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
352,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
353,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
354,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
355,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
356,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
357,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
358,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
359,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
360,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
361,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
362,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
363,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
364,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
365,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
366,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
367,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
368,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
369,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
370,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
371,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
372,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
373,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
374,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
375,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
376,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
377,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
378,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
379,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
380,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
381,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
382,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
383,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
384,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
385,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
386,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
387,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
388,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
389,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
390,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
391,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
392,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
393,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
394,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
395,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
396,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
397,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
398,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
399,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
400,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
401,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
402,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
403,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
404,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
405,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
406,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
407,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
408,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
409,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
410,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
411,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
412,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
413,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
414,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
415,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
416,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
417,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
418,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
419,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
420,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
421,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
422,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
423,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
424,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
425,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
426,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
427,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
428,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
429,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
430,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
431,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
432,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
433,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
434,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
435,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
436,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
437,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
438,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
439,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
440,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
441,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
442,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
443,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
444,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
445,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
446,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
447,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
448,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
449,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
450,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
451,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
452,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
453,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
454,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
455,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
456,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
457,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
458,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
459,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
460,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
461,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
462,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
463,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
464,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
465,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
466,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
467,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
468,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
469,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
470,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
471,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
472,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
473,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
474,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
475,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
476,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
477,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
478,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
479,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
480,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
481,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
482,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
483,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
484,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
485,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
486,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
487,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
488,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
489,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
490,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
491,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
492,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
493,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
494,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
495,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
496,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
497,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
498,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
499,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
500,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
501,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
502,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
503,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
504,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
505,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
506,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
507,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
508,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
509,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
510,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
511,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
512,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
513,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
514,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
515,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
516,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
517,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
518,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
519,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
520,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
521,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
522,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
523,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
524,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
525,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
526,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
527,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
528,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
529,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
530,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
531,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
532,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
533,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
534,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
535,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
536,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
537,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
538,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
539,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
540,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
541,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
542,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
543,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
544,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
545,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
546,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
547,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
548,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
549,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
550,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
551,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
552,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
553,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
554,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
555,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
556,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
557,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
558,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
559,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
560,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
561,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
562,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
563,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
564,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
565,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
566,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
567,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
568,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
569,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
570,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
571,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
572,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
573,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
574,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
575,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
576,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
577,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
578,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
579,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
580,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
581,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
582,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
583,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
584,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
585,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
586,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
587,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
588,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
589,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
590,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
591,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
592,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
593,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
594,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
595,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
596,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
597,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
598,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
599,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
600,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
601,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
602,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
603,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
604,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
605,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
606,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
607,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
608,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
609,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
610,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
611,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
612,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
613,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
614,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
615,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
616,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
617,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
618,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
619,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
620,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
621,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
622,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
623,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
624,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
625,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
626,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
627,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
628,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
629,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
630,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
631,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
632,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
633,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
634,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
635,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
636,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
637,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
638,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
639,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
640,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
641,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
642,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
643,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
644,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
645,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
646,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
647,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
648,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
649,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
650,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
651,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
652,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
653,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
654,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
655,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
656,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
657,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
658,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
659,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
660,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
661,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
662,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
663,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
664,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
665,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
666,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
667,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
668,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
669,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
670,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
671,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
672,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
673,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
674,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
675,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
676,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
677,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
678,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
679,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
680,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
681,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
682,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
683,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
684,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
685,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
686,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
687,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
688,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
689,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
690,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
691,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
692,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
693,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
694,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
695,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
696,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
697,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
698,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
699,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
700,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
701,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
702,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
703,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
704,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
705,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
706,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
707,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
708,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
709,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
710,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
711,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
712,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
713,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
714,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
715,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
716,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
717,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
718,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
719,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
720,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
721,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
722,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
723,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
724,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
725,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
726,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
727,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
728,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
729,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
730,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
731,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
732,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
733,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
734,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
735,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
736,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
737,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
738,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
739,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
740,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
741,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
742,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
743,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
744,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
745,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
746,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
747,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
748,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
749,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
750,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
751,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
752,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
753,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
754,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
755,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
756,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
757,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
758,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
759,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
760,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
761,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
762,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
763,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
764,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
765,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
766,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
767,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
768,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
769,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
770,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
771,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
772,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
773,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
774,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
775,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
776,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
777,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
778,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
779,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
780,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
781,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
782,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
783,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
784,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
785,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
786,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
787,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
788,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
789,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
790,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
791,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
792,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
793,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
794,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
795,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
796,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
797,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
798,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
799,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
800,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
801,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
802,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
803,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
804,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
805,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
806,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
807,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
808,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
809,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
810,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
811,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
812,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
813,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
814,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
815,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
816,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
817,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
818,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
819,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
820,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
821,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
822,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
823,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
824,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
825,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
826,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
827,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
828,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
829,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
830,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
831,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
832,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
833,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
834,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
835,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
836,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
837,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
838,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
839,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
840,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
841,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
842,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
843,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
844,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
845,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
846,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
847,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
848,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
849,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
850,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
851,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
852,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
853,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
854,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
855,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
856,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
857,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
858,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
859,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
860,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
861,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
862,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
863,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
864,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
865,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
866,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
867,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
868,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
869,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
870,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
871,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
872,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
873,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
874,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
875,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
876,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
877,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
878,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
879,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
880,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
881,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
882,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
883,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
884,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
885,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
886,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
887,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
888,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
889,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
890,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
891,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
892,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
893,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
894,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
895,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
896,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
897,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
898,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
899,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
900,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
901,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
902,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
903,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
904,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
905,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
906,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
907,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
908,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
909,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
910,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
911,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
912,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
913,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
914,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
915,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
916,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
917,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
918,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
919,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
920,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
921,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
922,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
923,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
924,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
925,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
926,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
927,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
928,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
929,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
930,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
931,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
932,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
933,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
934,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
935,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
936,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
937,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
938,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
939,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
940,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
941,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
942,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
943,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
944,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
945,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
946,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
947,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
948,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
949,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
950,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
951,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
952,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
953,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
954,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
955,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
956,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
957,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
958,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
959,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
960,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
961,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
962,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
963,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
964,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
965,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
966,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
967,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
968,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
969,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
970,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
971,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
972,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
973,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
974,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
975,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
976,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
977,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
978,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
979,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
980,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
981,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
982,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
983,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
984,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
985,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
986,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
987,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
988,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
989,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
990,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
991,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
992,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
993,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
994,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
995,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
996,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
997,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
998,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
999,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1000,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1001,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1002,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1003,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1004,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1005,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1006,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1007,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1008,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1009,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1010,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1011,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1012,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1013,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1014,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1015,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1016,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1017,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1018,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1019,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1020,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1021,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1022,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1023,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1024,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1025,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1026,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1027,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1028,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1029,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1030,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1031,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1032,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1033,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1034,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1035,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1036,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1037,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1038,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1039,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1040,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1041,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1042,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1043,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1044,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1045,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1046,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1047,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1048,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1049,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1050,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1051,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1052,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1053,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1054,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1055,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1056,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1057,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1058,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1059,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1060,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1061,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1062,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1063,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1064,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1065,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1066,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1067,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1068,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1069,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1070,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1071,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1072,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1073,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1074,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1075,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1076,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1077,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1078,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1079,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1080,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1081,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1082,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1083,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1084,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1085,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1086,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1087,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1088,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1089,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1090,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1091,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1092,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1093,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1094,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1095,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1096,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1097,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1098,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1099,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1100,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1101,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1102,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1103,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1104,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1105,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1106,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1107,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1108,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1109,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1110,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1111,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1112,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1113,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1114,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1115,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1116,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1117,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1118,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1119,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1120,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1121,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1122,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1123,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1124,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1125,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1126,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1127,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1128,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1129,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1130,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1131,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1132,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1133,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1134,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1135,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1136,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1137,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1138,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1139,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1140,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1141,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1142,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1143,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1144,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1145,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1146,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1147,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1148,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1149,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1150,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1151,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1152,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1153,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1154,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1155,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1156,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1157,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1158,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1159,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1160,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1161,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1162,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1163,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1164,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1165,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1166,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1167,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1168,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1169,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1170,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1171,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1172,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1173,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1174,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1175,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1176,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1177,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1178,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1179,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1180,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1181,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1182,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1183,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1184,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1185,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1186,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1187,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1188,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1189,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1190,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1191,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1192,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1193,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1194,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1195,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1196,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1197,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1198,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1199,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1200,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1201,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1202,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1203,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1204,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1205,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1206,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1207,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1208,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1209,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1210,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1211,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1212,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1213,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1214,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1215,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1216,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1217,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1218,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1219,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1220,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1221,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1222,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1223,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1224,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1225,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1226,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1227,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1228,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1229,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1230,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1231,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1232,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1233,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1234,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1235,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1236,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1237,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1238,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1239,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1240,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1241,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1242,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1243,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1244,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1245,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1246,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1247,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1248,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1249,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1250,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1251,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1252,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1253,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1254,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1255,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1256,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1257,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1258,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1259,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1260,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1261,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1262,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1263,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1264,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1265,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1266,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1267,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1268,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1269,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1270,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1271,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1272,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1273,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1274,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1275,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1276,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1277,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1278,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1279,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1280,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1281,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1282,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1283,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1284,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1285,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1286,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1287,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1288,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1289,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1290,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1291,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1292,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1293,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1294,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1295,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1296,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1297,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1298,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1299,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1300,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1301,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1302,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1303,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1304,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1305,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1306,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1307,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1308,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1309,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1310,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1311,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1312,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1313,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1314,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1315,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1316,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1317,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1318,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1319,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1320,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1321,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1322,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1323,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1324,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1325,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1326,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1327,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1328,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1329,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1330,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1331,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1332,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1333,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1334,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1335,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1336,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1337,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1338,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1339,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1340,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1341,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1342,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1343,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1344,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1345,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1346,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1347,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1348,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1349,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1350,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1351,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1352,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1353,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1354,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1355,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1356,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1357,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1358,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1359,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1360,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1361,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1362,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1363,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1364,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1365,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1366,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1367,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1368,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1369,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1370,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1371,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1372,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1373,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1374,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1375,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1376,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1377,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1378,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1379,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1380,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1381,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1382,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1383,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1384,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1385,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1386,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1387,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1388,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1389,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1390,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1391,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1392,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1393,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1394,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1395,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1396,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1397,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1398,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1399,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1400,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1401,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1402,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1403,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1404,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1405,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1406,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1407,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1408,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1409,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1410,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1411,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1412,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1413,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1414,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1415,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1416,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1417,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1418,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1419,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1420,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1421,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1422,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1423,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1424,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1425,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1426,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1427,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1428,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1429,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1430,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1431,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1432,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1433,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1434,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1435,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1436,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1437,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1438,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1439,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1440,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1441,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1442,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1443,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1444,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1445,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1446,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1447,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1448,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1449,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1450,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1451,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1452,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1453,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1454,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1455,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1456,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1457,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1458,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1459,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1460,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1461,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1462,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1463,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1464,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1465,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1466,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1467,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1468,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1469,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1470,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1471,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1472,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1473,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1474,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1475,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1476,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1477,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1478,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1479,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1480,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1481,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1482,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1483,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1484,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1485,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1486,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1487,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1488,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1489,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1490,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1491,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1492,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1493,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1494,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1495,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1496,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1497,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1498,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1499,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1500,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1501,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1502,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1503,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1504,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1505,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1506,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1507,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1508,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1509,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1510,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1511,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1512,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1513,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1514,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1515,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1516,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1517,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1518,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1519,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1520,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1521,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1522,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1523,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1524,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1525,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1526,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1527,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1528,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1529,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1530,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1531,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1532,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1533,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1534,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1535,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1536,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1537,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1538,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1539,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1540,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1541,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1542,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1543,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1544,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1545,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1546,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1547,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1548,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1549,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1550,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1551,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1552,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1553,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1554,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1555,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1556,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1557,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1558,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1559,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1560,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1561,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1562,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1563,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1564,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1565,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1566,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1567,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1568,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1569,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1570,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1571,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1572,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1573,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1574,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1575,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1576,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1577,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1578,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1579,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1580,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1581,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1582,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1583,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1584,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1585,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1586,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1587,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1588,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1589,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1590,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1591,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1592,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1593,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1594,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1595,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1596,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1597,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1598,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1599,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1600,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1601,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1602,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1603,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1604,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1605,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1606,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1607,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1608,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1609,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1610,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1611,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1612,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1613,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1614,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1615,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1616,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1617,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1618,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1619,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1620,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1621,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1622,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1623,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1624,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1625,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1626,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1627,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1628,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1629,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1630,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1631,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1632,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1633,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1634,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1635,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1636,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1637,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1638,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1639,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1640,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1641,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1642,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1643,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1644,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1645,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1646,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1647,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1648,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1649,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1650,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1651,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1652,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1653,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1654,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1655,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1656,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1657,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1658,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1659,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1660,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1661,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1662,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1663,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1664,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1665,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1666,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1667,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1668,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1669,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1670,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1671,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1672,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1673,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1674,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1675,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1676,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1677,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1678,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1679,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1680,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1681,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1682,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1683,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1684,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1685,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1686,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1687,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1688,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1689,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1690,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1691,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1692,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1693,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1694,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1695,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1696,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1697,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1698,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1699,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1700,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1701,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1702,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1703,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1704,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1705,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1706,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1707,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1708,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1709,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1710,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1711,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1712,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1713,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1714,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1715,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1716,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1717,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1718,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1719,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1720,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1721,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1722,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1723,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1724,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1725,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1726,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1727,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1728,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1729,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1730,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1731,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1732,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1733,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1734,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1735,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1736,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1737,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1738,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1739,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1740,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1741,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1742,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1743,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1744,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1745,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1746,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1747,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1748,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1749,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1750,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1751,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1752,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1753,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1754,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1755,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1756,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1757,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1758,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1759,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1760,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1761,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1762,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1763,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1764,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1765,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1766,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1767,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1768,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1769,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1770,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1771,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1772,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1773,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1774,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1775,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1776,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1777,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1778,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1779,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1780,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1781,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1782,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1783,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1784,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1785,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1786,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1787,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1788,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1789,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1790,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1791,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1792,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1793,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1794,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1795,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1796,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1797,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1798,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1799,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1800,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1801,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1802,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1803,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1804,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1805,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1806,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1807,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1808,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1809,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1810,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1811,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1812,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1813,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1814,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1815,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1816,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1817,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1818,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1819,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1820,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1821,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1822,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1823,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1824,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1825,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1826,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1827,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1828,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1829,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1830,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1831,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1832,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1833,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1834,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1835,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1836,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1837,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1838,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1839,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1840,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1841,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1842,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1843,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1844,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1845,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1846,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1847,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1848,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1849,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1850,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1851,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1852,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1853,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1854,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1855,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1856,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1857,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1858,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1859,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1860,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1861,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1862,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1863,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1864,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1865,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1866,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1867,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1868,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1869,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1870,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1871,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1872,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1873,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1874,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1875,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1876,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1877,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1878,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1879,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1880,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1881,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1882,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1883,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1884,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1885,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1886,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1887,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1888,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1889,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1890,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1891,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1892,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1893,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1894,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1895,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1896,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1897,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1898,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1899,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1900,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1901,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1902,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1903,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1904,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1905,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1906,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1907,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1908,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1909,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1910,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1911,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1912,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1913,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1914,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1915,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1916,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1917,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1918,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1919,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1920,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1921,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1922,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1923,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1924,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1925,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1926,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1927,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1928,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1929,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1930,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1931,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1932,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1933,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1934,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1935,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1936,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1937,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1938,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1939,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1940,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1941,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1942,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1943,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1944,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1945,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1946,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1947,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1948,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1949,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1950,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1951,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1952,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1953,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1954,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1955,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1956,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1957,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1958,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1959,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1960,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1961,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1962,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1963,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1964,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1965,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1966,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1967,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1968,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1969,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1970,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1971,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1972,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1973,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1974,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1975,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1976,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1977,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1978,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1979,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
1980,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
1981,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
1982,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
1983,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
1984,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
1985,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
1986,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
1987,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
1988,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
1989,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
1990,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
1991,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
1992,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
1993,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
1994,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
1995,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
1996,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
1997,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
1998,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
1999,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2000,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2001,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2002,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2003,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2004,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2005,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2006,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2007,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2008,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2009,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2010,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2011,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2012,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2013,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2014,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2015,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2016,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2017,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2018,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2019,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2020,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2021,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2022,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2023,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2024,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2025,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2026,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2027,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2028,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2029,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2030,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2031,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2032,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2033,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2034,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2035,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2036,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2037,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2038,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2039,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2040,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2041,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2042,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2043,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2044,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2045,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2046,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2047,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2048,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2049,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2050,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2051,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2052,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2053,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2054,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2055,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2056,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2057,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2058,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2059,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2060,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2061,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2062,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2063,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2064,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2065,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2066,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2067,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2068,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2069,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2070,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2071,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2072,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2073,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2074,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2075,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2076,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2077,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2078,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2079,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2080,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2081,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2082,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2083,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2084,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2085,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2086,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2087,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2088,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2089,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2090,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2091,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2092,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2093,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2094,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2095,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2096,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2097,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2098,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2099,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2100,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2101,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2102,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2103,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2104,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2105,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2106,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2107,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2108,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2109,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2110,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2111,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2112,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2113,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2114,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2115,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2116,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2117,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2118,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2119,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2120,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2121,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2122,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2123,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2124,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2125,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2126,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2127,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2128,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2129,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2130,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2131,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2132,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2133,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2134,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2135,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2136,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2137,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2138,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2139,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2140,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2141,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2142,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2143,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2144,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2145,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2146,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2147,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2148,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2149,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2150,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2151,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2152,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2153,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2154,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2155,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2156,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2157,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2158,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2159,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2160,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2161,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2162,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2163,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2164,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2165,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2166,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2167,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2168,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2169,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2170,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2171,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2172,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2173,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2174,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2175,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2176,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2177,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2178,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2179,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2180,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2181,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2182,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2183,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2184,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2185,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2186,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2187,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2188,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2189,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2190,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2191,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2192,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2193,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2194,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2195,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2196,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2197,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2198,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2199,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2200,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2201,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2202,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2203,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2204,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2205,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2206,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2207,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2208,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2209,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2210,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2211,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2212,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2213,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2214,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2215,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2216,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2217,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2218,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2219,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2220,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2221,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2222,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2223,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2224,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2225,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2226,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2227,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2228,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2229,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2230,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2231,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2232,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2233,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2234,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2235,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2236,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2237,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2238,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2239,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2240,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2241,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2242,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2243,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2244,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2245,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2246,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2247,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2248,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2249,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2250,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2251,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2252,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2253,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2254,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2255,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2256,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2257,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2258,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2259,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2260,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2261,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2262,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2263,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2264,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2265,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2266,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2267,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2268,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2269,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2270,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2271,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2272,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2273,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2274,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2275,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2276,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2277,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2278,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2279,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2280,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2281,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2282,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2283,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2284,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2285,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2286,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2287,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2288,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2289,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2290,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2291,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2292,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2293,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2294,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2295,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2296,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2297,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2298,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2299,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2300,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2301,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2302,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2303,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2304,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2305,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2306,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2307,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2308,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2309,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2310,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2311,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2312,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2313,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2314,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2315,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2316,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2317,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2318,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2319,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2320,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2321,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2322,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2323,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2324,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2325,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2326,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2327,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2328,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2329,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2330,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2331,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2332,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2333,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2334,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2335,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2336,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2337,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2338,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2339,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2340,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2341,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2342,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2343,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2344,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2345,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2346,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2347,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2348,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2349,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2350,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2351,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2352,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2353,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2354,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2355,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2356,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2357,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2358,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2359,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2360,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2361,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2362,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2363,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2364,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2365,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2366,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2367,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2368,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2369,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2370,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2371,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2372,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2373,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2374,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2375,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2376,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2377,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2378,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2379,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2380,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2381,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2382,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2383,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2384,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2385,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2386,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2387,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2388,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2389,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2390,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2391,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2392,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2393,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2394,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2395,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2396,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2397,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2398,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2399,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2400,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2401,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2402,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2403,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2404,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2405,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2406,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2407,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2408,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2409,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2410,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2411,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2412,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2413,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2414,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2415,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2416,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2417,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2418,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2419,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2420,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2421,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2422,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2423,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2424,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2425,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2426,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2427,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2428,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2429,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2430,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2431,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2432,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2433,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2434,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2435,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2436,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2437,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2438,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2439,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2440,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2441,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2442,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2443,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2444,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2445,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2446,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2447,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2448,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2449,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2450,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2451,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2452,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2453,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2454,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2455,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2456,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2457,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2458,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2459,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2460,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2461,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2462,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2463,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2464,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2465,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2466,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2467,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2468,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2469,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2470,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2471,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2472,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2473,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2474,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2475,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2476,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2477,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2478,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2479,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2480,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2481,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2482,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2483,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2484,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2485,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2486,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2487,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2488,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2489,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2490,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2491,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2492,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2493,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2494,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2495,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2496,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2497,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2498,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2499,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2500,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2501,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2502,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2503,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2504,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2505,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2506,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2507,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2508,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2509,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2510,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2511,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2512,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2513,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2514,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2515,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2516,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2517,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2518,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2519,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2520,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2521,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2522,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2523,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2524,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2525,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2526,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2527,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2528,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2529,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2530,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2531,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2532,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2533,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2534,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2535,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2536,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2537,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2538,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2539,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2540,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2541,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2542,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2543,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2544,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2545,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2546,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2547,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2548,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2549,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2550,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2551,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2552,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2553,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2554,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2555,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2556,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2557,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2558,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2559,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2560,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2561,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2562,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2563,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2564,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2565,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2566,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2567,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2568,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2569,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2570,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2571,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2572,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2573,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2574,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2575,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2576,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2577,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2578,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2579,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2580,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2581,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2582,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2583,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2584,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2585,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2586,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2587,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2588,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2589,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2590,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2591,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2592,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2593,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2594,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2595,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2596,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2597,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2598,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2599,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2600,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2601,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2602,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2603,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2604,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2605,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2606,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2607,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2608,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2609,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2610,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2611,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2612,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2613,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2614,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2615,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2616,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2617,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2618,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2619,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2620,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2621,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2622,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2623,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2624,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2625,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2626,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2627,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2628,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2629,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2630,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2631,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2632,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2633,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2634,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2635,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2636,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2637,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2638,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2639,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2640,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2641,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2642,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2643,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2644,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2645,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2646,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2647,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2648,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2649,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2650,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2651,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2652,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2653,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2654,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2655,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2656,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2657,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2658,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2659,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2660,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2661,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2662,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2663,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2664,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2665,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2666,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2667,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2668,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2669,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2670,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2671,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2672,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2673,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2674,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2675,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2676,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2677,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2678,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2679,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2680,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2681,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2682,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2683,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2684,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2685,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2686,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2687,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2688,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2689,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2690,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2691,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2692,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2693,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2694,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2695,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2696,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2697,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2698,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2699,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2700,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2701,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2702,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2703,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2704,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2705,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2706,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2707,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2708,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2709,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2710,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2711,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2712,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2713,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2714,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2715,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2716,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2717,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2718,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2719,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2720,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2721,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2722,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2723,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2724,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2725,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2726,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2727,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2728,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2729,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2730,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2731,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2732,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2733,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2734,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2735,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2736,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2737,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2738,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2739,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2740,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2741,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2742,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2743,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2744,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2745,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2746,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2747,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2748,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2749,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2750,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2751,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2752,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2753,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2754,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2755,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2756,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2757,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2758,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2759,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2760,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2761,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2762,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2763,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2764,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2765,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2766,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2767,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2768,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2769,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2770,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2771,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2772,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2773,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2774,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2775,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2776,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2777,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2778,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2779,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2780,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2781,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2782,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2783,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2784,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2785,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2786,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2787,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2788,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2789,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2790,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2791,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2792,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2793,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2794,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2795,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2796,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2797,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2798,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2799,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2800,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2801,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2802,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2803,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2804,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2805,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2806,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2807,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2808,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2809,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2810,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2811,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2812,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2813,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2814,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2815,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2816,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2817,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2818,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2819,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2820,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2821,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2822,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2823,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2824,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2825,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2826,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2827,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2828,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2829,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2830,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2831,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2832,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2833,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2834,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2835,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2836,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2837,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2838,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2839,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2840,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2841,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2842,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2843,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2844,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2845,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2846,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2847,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2848,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2849,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2850,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2851,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2852,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2853,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2854,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2855,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2856,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2857,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2858,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2859,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2860,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2861,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2862,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2863,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2864,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2865,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2866,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2867,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2868,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2869,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2870,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2871,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2872,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2873,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2874,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2875,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2876,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2877,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2878,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2879,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2880,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2881,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2882,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2883,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2884,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2885,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2886,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2887,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2888,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2889,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2890,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2891,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2892,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2893,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2894,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2895,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2896,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2897,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2898,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2899,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2900,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2901,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2902,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2903,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2904,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2905,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2906,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2907,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2908,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2909,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2910,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2911,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2912,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2913,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2914,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2915,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2916,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2917,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2918,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2919,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2920,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2921,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2922,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2923,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2924,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2925,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2926,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2927,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2928,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2929,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2930,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2931,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2932,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2933,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2934,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2935,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2936,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2937,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2938,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2939,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2940,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2941,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2942,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2943,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2944,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2945,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2946,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2947,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2948,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2949,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2950,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2951,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2952,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2953,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2954,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2955,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2956,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2957,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2958,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2959,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2960,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2961,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2962,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2963,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2964,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2965,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2966,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2967,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2968,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2969,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2970,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2971,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2972,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2973,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2974,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2975,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2976,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2977,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2978,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2979,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
2980,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
2981,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
2982,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
2983,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
2984,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
2985,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
2986,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
2987,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
2988,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
2989,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
2990,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
2991,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
2992,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
2993,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
2994,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
2995,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
2996,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
2997,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
2998,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
2999,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3000,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3001,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3002,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3003,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3004,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3005,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3006,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3007,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3008,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3009,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3010,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3011,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3012,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3013,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3014,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3015,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3016,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3017,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3018,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3019,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3020,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3021,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3022,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3023,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3024,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3025,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3026,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3027,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3028,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3029,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3030,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3031,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3032,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3033,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3034,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3035,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3036,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3037,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3038,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3039,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3040,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3041,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3042,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3043,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3044,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3045,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3046,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3047,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3048,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3049,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3050,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3051,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3052,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3053,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3054,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3055,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3056,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3057,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3058,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3059,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3060,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3061,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3062,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3063,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3064,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3065,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3066,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3067,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3068,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3069,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3070,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3071,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3072,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3073,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3074,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3075,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3076,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3077,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3078,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3079,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3080,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3081,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3082,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3083,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3084,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3085,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3086,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3087,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3088,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3089,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3090,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3091,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3092,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3093,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3094,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3095,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3096,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3097,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3098,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3099,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3100,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3101,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3102,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3103,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3104,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3105,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3106,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3107,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3108,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3109,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3110,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3111,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3112,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3113,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3114,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3115,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3116,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3117,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3118,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3119,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3120,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3121,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3122,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3123,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3124,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3125,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3126,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3127,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3128,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3129,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3130,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3131,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3132,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3133,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3134,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3135,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3136,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3137,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3138,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3139,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3140,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3141,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3142,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3143,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3144,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3145,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3146,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3147,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3148,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3149,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3150,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3151,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3152,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3153,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3154,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3155,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3156,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3157,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3158,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3159,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3160,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3161,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3162,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3163,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3164,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3165,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3166,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3167,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3168,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3169,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3170,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3171,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3172,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3173,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3174,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3175,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3176,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3177,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3178,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3179,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3180,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3181,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3182,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3183,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3184,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3185,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3186,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3187,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3188,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3189,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3190,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3191,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3192,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3193,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3194,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3195,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3196,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3197,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3198,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3199,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3200,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3201,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3202,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3203,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3204,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3205,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3206,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3207,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3208,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3209,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3210,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3211,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3212,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3213,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3214,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3215,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3216,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3217,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3218,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3219,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3220,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3221,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3222,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3223,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3224,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3225,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3226,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3227,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3228,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3229,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3230,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3231,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3232,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3233,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3234,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3235,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3236,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3237,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3238,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3239,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3240,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3241,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3242,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3243,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3244,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3245,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3246,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3247,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3248,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3249,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3250,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3251,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3252,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3253,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3254,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3255,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3256,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3257,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3258,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3259,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3260,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3261,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3262,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3263,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3264,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3265,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3266,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3267,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3268,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3269,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3270,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3271,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3272,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3273,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3274,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3275,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3276,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3277,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3278,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3279,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3280,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3281,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3282,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3283,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3284,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3285,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3286,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3287,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3288,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3289,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3290,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3291,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3292,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3293,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3294,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3295,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3296,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3297,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3298,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3299,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3300,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3301,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3302,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3303,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3304,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3305,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3306,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3307,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3308,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3309,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3310,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3311,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3312,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3313,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3314,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3315,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3316,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3317,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3318,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3319,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3320,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3321,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3322,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3323,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3324,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3325,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3326,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3327,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3328,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3329,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3330,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3331,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3332,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3333,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3334,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3335,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3336,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3337,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3338,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3339,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3340,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3341,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3342,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3343,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3344,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3345,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3346,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3347,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3348,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3349,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3350,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3351,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3352,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3353,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3354,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3355,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3356,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3357,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3358,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3359,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3360,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3361,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3362,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3363,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3364,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3365,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3366,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3367,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3368,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3369,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3370,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3371,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3372,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3373,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3374,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3375,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3376,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3377,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3378,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3379,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3380,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3381,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3382,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3383,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3384,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3385,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3386,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3387,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3388,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3389,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3390,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3391,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3392,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3393,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3394,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3395,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3396,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3397,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3398,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3399,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3400,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3401,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3402,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3403,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3404,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3405,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3406,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3407,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3408,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3409,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3410,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3411,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3412,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3413,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3414,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3415,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3416,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3417,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3418,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3419,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3420,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3421,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3422,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3423,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3424,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3425,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3426,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3427,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3428,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3429,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3430,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3431,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3432,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3433,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3434,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3435,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3436,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3437,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3438,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3439,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3440,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3441,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3442,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3443,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3444,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3445,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3446,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3447,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3448,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3449,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3450,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3451,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3452,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3453,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3454,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3455,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3456,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3457,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3458,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3459,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3460,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3461,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3462,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3463,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3464,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3465,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3466,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3467,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3468,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3469,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3470,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3471,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3472,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3473,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3474,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3475,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3476,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3477,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3478,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3479,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3480,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3481,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3482,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3483,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3484,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3485,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3486,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3487,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3488,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3489,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3490,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3491,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3492,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3493,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3494,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3495,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3496,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3497,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3498,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3499,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3500,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3501,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3502,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3503,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3504,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3505,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3506,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3507,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3508,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3509,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3510,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3511,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3512,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3513,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3514,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3515,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3516,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3517,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3518,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3519,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3520,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3521,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3522,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3523,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3524,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3525,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3526,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3527,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3528,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3529,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3530,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3531,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3532,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3533,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3534,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3535,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3536,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3537,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3538,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3539,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3540,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3541,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3542,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3543,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3544,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3545,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3546,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3547,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3548,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3549,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3550,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3551,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3552,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3553,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3554,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3555,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3556,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3557,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3558,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3559,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3560,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3561,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3562,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3563,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3564,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3565,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3566,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3567,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3568,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3569,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3570,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3571,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3572,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3573,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3574,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3575,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3576,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3577,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3578,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3579,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3580,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3581,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3582,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3583,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3584,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3585,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3586,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3587,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3588,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3589,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3590,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3591,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3592,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3593,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3594,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3595,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3596,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3597,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3598,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3599,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3600,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3601,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3602,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3603,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3604,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3605,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3606,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3607,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3608,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3609,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3610,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3611,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3612,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3613,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3614,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3615,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3616,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3617,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3618,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3619,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3620,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3621,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3622,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3623,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3624,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3625,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3626,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3627,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3628,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3629,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3630,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3631,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3632,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3633,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3634,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3635,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3636,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3637,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3638,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3639,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3640,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3641,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3642,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3643,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3644,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3645,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3646,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3647,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3648,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3649,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3650,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3651,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3652,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3653,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3654,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3655,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3656,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3657,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3658,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3659,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3660,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3661,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3662,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3663,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3664,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3665,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3666,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3667,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3668,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3669,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3670,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3671,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3672,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3673,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3674,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3675,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3676,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3677,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3678,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3679,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3680,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3681,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3682,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3683,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3684,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3685,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3686,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3687,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3688,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3689,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3690,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3691,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3692,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3693,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3694,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3695,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3696,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3697,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3698,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3699,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3700,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3701,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3702,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3703,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3704,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3705,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3706,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3707,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3708,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3709,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3710,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3711,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3712,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3713,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3714,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3715,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3716,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3717,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3718,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3719,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3720,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3721,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3722,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3723,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3724,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3725,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3726,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3727,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3728,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3729,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3730,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3731,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3732,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3733,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3734,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3735,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3736,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3737,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3738,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3739,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3740,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3741,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3742,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3743,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3744,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3745,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3746,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3747,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3748,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3749,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3750,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3751,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3752,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3753,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3754,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3755,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3756,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3757,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3758,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3759,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3760,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3761,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3762,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3763,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3764,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3765,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3766,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3767,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3768,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3769,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3770,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3771,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3772,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3773,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3774,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3775,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3776,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3777,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3778,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3779,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3780,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3781,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3782,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3783,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3784,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3785,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3786,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3787,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3788,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3789,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3790,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3791,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3792,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3793,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3794,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3795,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3796,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3797,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3798,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3799,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3800,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3801,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3802,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3803,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3804,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3805,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3806,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3807,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3808,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3809,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3810,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3811,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3812,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3813,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3814,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3815,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3816,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3817,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3818,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3819,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3820,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3821,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3822,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3823,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3824,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3825,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3826,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3827,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3828,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3829,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3830,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3831,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3832,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3833,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3834,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3835,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3836,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3837,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3838,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3839,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3840,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3841,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3842,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3843,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3844,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3845,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3846,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3847,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3848,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3849,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3850,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3851,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3852,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3853,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3854,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3855,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3856,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3857,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3858,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3859,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3860,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3861,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3862,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3863,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3864,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3865,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3866,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3867,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3868,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3869,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3870,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3871,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3872,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3873,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3874,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3875,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3876,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3877,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3878,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3879,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3880,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3881,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3882,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3883,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3884,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3885,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3886,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3887,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3888,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3889,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3890,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3891,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3892,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3893,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3894,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3895,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3896,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3897,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3898,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3899,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3900,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3901,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3902,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3903,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3904,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3905,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3906,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3907,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3908,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3909,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3910,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3911,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3912,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3913,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3914,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3915,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3916,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3917,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3918,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3919,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3920,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3921,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3922,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3923,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3924,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3925,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3926,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3927,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3928,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3929,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3930,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3931,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3932,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3933,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3934,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3935,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3936,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3937,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3938,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3939,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3940,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3941,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3942,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3943,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3944,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3945,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3946,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3947,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3948,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3949,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3950,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3951,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3952,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3953,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3954,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3955,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3956,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3957,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3958,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3959,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3960,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3961,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3962,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3963,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3964,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3965,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3966,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3967,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3968,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3969,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3970,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3971,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3972,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3973,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3974,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3975,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3976,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3977,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3978,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3979,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
3980,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
3981,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
3982,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
3983,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
3984,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
3985,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
3986,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
3987,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
3988,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
3989,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
3990,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
3991,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
3992,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
3993,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
3994,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
3995,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
3996,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
3997,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
3998,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
3999,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4000,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4001,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4002,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4003,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4004,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4005,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4006,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4007,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4008,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4009,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4010,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4011,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4012,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4013,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4014,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4015,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4016,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4017,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4018,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4019,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4020,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4021,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4022,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4023,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4024,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4025,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4026,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4027,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4028,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4029,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4030,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4031,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4032,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4033,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4034,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4035,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4036,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4037,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4038,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4039,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4040,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4041,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4042,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4043,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4044,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4045,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4046,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4047,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4048,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4049,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4050,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4051,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4052,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4053,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4054,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4055,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4056,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4057,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4058,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4059,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4060,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4061,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4062,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4063,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4064,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4065,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4066,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4067,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4068,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4069,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4070,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4071,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4072,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4073,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4074,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4075,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4076,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4077,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4078,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4079,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4080,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4081,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4082,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4083,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4084,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4085,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4086,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4087,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4088,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4089,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4090,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4091,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4092,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4093,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4094,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4095,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4096,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4097,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4098,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4099,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4100,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4101,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4102,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4103,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4104,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4105,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4106,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4107,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4108,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4109,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4110,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4111,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4112,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4113,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4114,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4115,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4116,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4117,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4118,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4119,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4120,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4121,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4122,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4123,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4124,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4125,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4126,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4127,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4128,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4129,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4130,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4131,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4132,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4133,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4134,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4135,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4136,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4137,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4138,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4139,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4140,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4141,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4142,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4143,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4144,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4145,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4146,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4147,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4148,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4149,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4150,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4151,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4152,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4153,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4154,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4155,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4156,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4157,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4158,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4159,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4160,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4161,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4162,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4163,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4164,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4165,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4166,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4167,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4168,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4169,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4170,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4171,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4172,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4173,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4174,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4175,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4176,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4177,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4178,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4179,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4180,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4181,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4182,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4183,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4184,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4185,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4186,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4187,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4188,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4189,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4190,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4191,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4192,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4193,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4194,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4195,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4196,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4197,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4198,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4199,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4200,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4201,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4202,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4203,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4204,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4205,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4206,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4207,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4208,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4209,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4210,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4211,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4212,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4213,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4214,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4215,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4216,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4217,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4218,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4219,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4220,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4221,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4222,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4223,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4224,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4225,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4226,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4227,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4228,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4229,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4230,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4231,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4232,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4233,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4234,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4235,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4236,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4237,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4238,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4239,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4240,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4241,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4242,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4243,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4244,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4245,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4246,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4247,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4248,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4249,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4250,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4251,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4252,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4253,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4254,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4255,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4256,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4257,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4258,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4259,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4260,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4261,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4262,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4263,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4264,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4265,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4266,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4267,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4268,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4269,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4270,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4271,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4272,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4273,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4274,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4275,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4276,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4277,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4278,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4279,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4280,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4281,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4282,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4283,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4284,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4285,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4286,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4287,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4288,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4289,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4290,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4291,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4292,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4293,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4294,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4295,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4296,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4297,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4298,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4299,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4300,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4301,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4302,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4303,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4304,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4305,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4306,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4307,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4308,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4309,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4310,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4311,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4312,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4313,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4314,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4315,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4316,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4317,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4318,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4319,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4320,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4321,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4322,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4323,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4324,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4325,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4326,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4327,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4328,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4329,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4330,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4331,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4332,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4333,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4334,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4335,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4336,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4337,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4338,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4339,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4340,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4341,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4342,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4343,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4344,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4345,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4346,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4347,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4348,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4349,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4350,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4351,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4352,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4353,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4354,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4355,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4356,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4357,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4358,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4359,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4360,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4361,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4362,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4363,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4364,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4365,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4366,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4367,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4368,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4369,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4370,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4371,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4372,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4373,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4374,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4375,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4376,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4377,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4378,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4379,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4380,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4381,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4382,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4383,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4384,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4385,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4386,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4387,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4388,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4389,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4390,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4391,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4392,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4393,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4394,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4395,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4396,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4397,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4398,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4399,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4400,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4401,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4402,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4403,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4404,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4405,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4406,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4407,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4408,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4409,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4410,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4411,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4412,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4413,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4414,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4415,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4416,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4417,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4418,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4419,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4420,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4421,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4422,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4423,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4424,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4425,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4426,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4427,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4428,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4429,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4430,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4431,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4432,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4433,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4434,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4435,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4436,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4437,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4438,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4439,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4440,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4441,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4442,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4443,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4444,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4445,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4446,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4447,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4448,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4449,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4450,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4451,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4452,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4453,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4454,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4455,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4456,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4457,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4458,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4459,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4460,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4461,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4462,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4463,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4464,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4465,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4466,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4467,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4468,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4469,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4470,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4471,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4472,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4473,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4474,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4475,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4476,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4477,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4478,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4479,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4480,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4481,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4482,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4483,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4484,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4485,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4486,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4487,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4488,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4489,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4490,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4491,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4492,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4493,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4494,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4495,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4496,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4497,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4498,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4499,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4500,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4501,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4502,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4503,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4504,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4505,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4506,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4507,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4508,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4509,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4510,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4511,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4512,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4513,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4514,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4515,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4516,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4517,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4518,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4519,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4520,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4521,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4522,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4523,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4524,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4525,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4526,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4527,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4528,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4529,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4530,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4531,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4532,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4533,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4534,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4535,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4536,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4537,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4538,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4539,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4540,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4541,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4542,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4543,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4544,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4545,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4546,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4547,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4548,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4549,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4550,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4551,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4552,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4553,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4554,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4555,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4556,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4557,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4558,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4559,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4560,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4561,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4562,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4563,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4564,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4565,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4566,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4567,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4568,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4569,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4570,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4571,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4572,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4573,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4574,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4575,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4576,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4577,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4578,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4579,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4580,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4581,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4582,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4583,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4584,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4585,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4586,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4587,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4588,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4589,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4590,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4591,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4592,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4593,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4594,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4595,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4596,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4597,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4598,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4599,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4600,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4601,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4602,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4603,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4604,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4605,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4606,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4607,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4608,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4609,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4610,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4611,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4612,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4613,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4614,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4615,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4616,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4617,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4618,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4619,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4620,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4621,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4622,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4623,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4624,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4625,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4626,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4627,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4628,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4629,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4630,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4631,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4632,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4633,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4634,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4635,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4636,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4637,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4638,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4639,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4640,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4641,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4642,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4643,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4644,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4645,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4646,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4647,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4648,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4649,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4650,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4651,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4652,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4653,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4654,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4655,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4656,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4657,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4658,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4659,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4660,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4661,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4662,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4663,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4664,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4665,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4666,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4667,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4668,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4669,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4670,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4671,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4672,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4673,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4674,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4675,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4676,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4677,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4678,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4679,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4680,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4681,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4682,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4683,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4684,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4685,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4686,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4687,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4688,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4689,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4690,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4691,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4692,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4693,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4694,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4695,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4696,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4697,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4698,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4699,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4700,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4701,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4702,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4703,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4704,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4705,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4706,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4707,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4708,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4709,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4710,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4711,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4712,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4713,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4714,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4715,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4716,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4717,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4718,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4719,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4720,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4721,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4722,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4723,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4724,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4725,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4726,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4727,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4728,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4729,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4730,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4731,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4732,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4733,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4734,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4735,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4736,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4737,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4738,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4739,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4740,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4741,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4742,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4743,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4744,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4745,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4746,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4747,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4748,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4749,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4750,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4751,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4752,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4753,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4754,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4755,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4756,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4757,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4758,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4759,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4760,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4761,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4762,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4763,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4764,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4765,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4766,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4767,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4768,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4769,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4770,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4771,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4772,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4773,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4774,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4775,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4776,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4777,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4778,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4779,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4780,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4781,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4782,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4783,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4784,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4785,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4786,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4787,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4788,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4789,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4790,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4791,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4792,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4793,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4794,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4795,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4796,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4797,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4798,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4799,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4800,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4801,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4802,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4803,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4804,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4805,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4806,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4807,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4808,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4809,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4810,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4811,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4812,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4813,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4814,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4815,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4816,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4817,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4818,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4819,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4820,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4821,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4822,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4823,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4824,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4825,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4826,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4827,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4828,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4829,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4830,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4831,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4832,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4833,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4834,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4835,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4836,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4837,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4838,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4839,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4840,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4841,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4842,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4843,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4844,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4845,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4846,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4847,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4848,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4849,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4850,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4851,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4852,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4853,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4854,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4855,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4856,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4857,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4858,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4859,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4860,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4861,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4862,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4863,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4864,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4865,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4866,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4867,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4868,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4869,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4870,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4871,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4872,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4873,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4874,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4875,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4876,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4877,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4878,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4879,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4880,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4881,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4882,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4883,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4884,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4885,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4886,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4887,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4888,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4889,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4890,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4891,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4892,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4893,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4894,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4895,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4896,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4897,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4898,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4899,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4900,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4901,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4902,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4903,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4904,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4905,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4906,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4907,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4908,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4909,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4910,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4911,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4912,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4913,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4914,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4915,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4916,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4917,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4918,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4919,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4920,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4921,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4922,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4923,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4924,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4925,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4926,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4927,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4928,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4929,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4930,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4931,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4932,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4933,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4934,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4935,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4936,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4937,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4938,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4939,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4940,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4941,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4942,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4943,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4944,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4945,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4946,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4947,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4948,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4949,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4950,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4951,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4952,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4953,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4954,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4955,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4956,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4957,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4958,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4959,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4960,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4961,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4962,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4963,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4964,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4965,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4966,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4967,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4968,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4969,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4970,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4971,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4972,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4973,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4974,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4975,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4976,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4977,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4978,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4979,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
4980,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
4981,"x = 10
y = 20
sum_xy = x + y",두 개의 숫자를 더하는 간단한 연산,"basic, arithmetic"
4982,"name = 'Alice'
print(f'Hello, {name}')",f-string을 사용한 문자열 포맷팅,"basic, string formatting"
4983,is_even = lambda x: x % 2 == 0,람다 함수를 사용한 짝수 판별,"lambda, function"
4984,"my_list = [1, 2, 3, 4]
my_list.append(5)",리스트에 요소 추가,"list, append"
4985,"my_dict = {'name': 'Alice', 'age': 25}
print(my_dict['name'])",딕셔너리에서 값 가져오기,"dictionary, access"
4986,"def greet(name):
    return f'Hello, {name}'",함수를 사용한 간단한 인사,"function, greeting"
4987,"class Animal:
    def speak(self):
        return '...' ",기본 클래스 정의,"class, OOP"
4988,"class Dog(Animal):
    def speak(self):
        return 'Woof!'",클래스 상속 예제,"class, inheritance"
4989,"with open('data.txt', 'r') as file:
    content = file.read()",파일 읽기 (with 사용),"file handling, read"
4990,"import json
data = {'name': 'Alice'}
json_str = json.dumps(data)",딕셔너리를 JSON 문자열로 변환,"json, data"
4991,"try:
    result = 10 / 0
except ZeroDivisionError:
    print('0으로 나눌 수 없습니다')",ZeroDivisionError 예외 처리,exception handling
4992,"import asyncio
async def main():
    await asyncio.sleep(1)",asyncio를 이용한 비동기 처리,"asyncio, async"
4993,"arr = [3, 1, 4, 1, 5, 9]
sorted_arr = sorted(arr)",리스트 정렬,"algorithm, sorting"
4994,"def fibonacci(n):
    return n if n < 2 else fibonacci(n-1) + fibonacci(n-2)",재귀를 이용한 피보나치 수열,"recursion, fibonacci"
4995,"import numpy as np
arr = np.array([1, 2, 3])",NumPy 배열 생성,"numpy, array"
4996,"import pandas as pd
df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",Pandas 데이터프레임 생성,"pandas, dataframe"
4997,"import requests
response = requests.get('https://api.github.com')",requests를 이용한 API 호출,"requests, API"
4998,"from bs4 import BeautifulSoup
soup = BeautifulSoup('<html></html>', 'html.parser')",BeautifulSoup을 이용한 웹 스크래핑,"BeautifulSoup, web scraping"
4999,"import smtplib
server = smtplib.SMTP('smtp.example.com', 587)",SMTP를 이용한 이메일 전송,"email, SMTP"
5000,"import schedule
def job(): print('Job 실행됨')
schedule.every().day.at('10:30').do(job)",스케줄러를 이용한 작업 자동 실행,"automation, scheduling"
