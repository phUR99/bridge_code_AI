topic,question,comment
홍길동의 정보를 출력하라.,"
def declare_and_assign():
    name = '홍길동'
    age = 25
    height = 175.5
    is_student = True
    print('이름:', name)
    print('나이:', age)
    print('키:', height)
    print('학생 여부:', is_student)

declare_and_assign()
","# declare_and_assign라는 이름의 함수를 정의합니다.
# 변수 name에 문자열 '홍길동'을 할당합니다.
# 변수 age에 정수 25를 할당합니다.
# 변수 height에 실수 175.5를 할당합니다.
# 변수 is_student에 불린 값 True를 할당합니다.
# '이름:'과 변수 name의 값을 출력합니다.
# '나이:'와 변수 age의 값을 출력합니다.
# '키:'와 변수 height의 값을 출력합니다.
# '학생 여부:'와 변수 is_student의 값을 출력합니다.
# declare_and_assign 함수를 호출하여 실행합니다.
"
사용자가 입력한 값의 데이터 타입을 확인하라.,"def check_data_type(value):
    data_type = type(value)
    return f'The data type of the provided value is: {data_type}'

user_input = input('Enter a value: ')
result = check_data_type(user_input)
print(result)
","
# 함수 check_data_type을 정의하고, 매개변수 value를 입력받는다.
# 입력된 값의 데이터 타입을 확인하고 변수 data_type에 저장한다.
# 데이터 타입을 문자열 형태로 포매팅하여 반환한다.
# 사용자에게 값을 입력받기 위한 프롬프트를 표시한다.
# 함수 check_data_type을 호출하고, 사용자 입력을 인자로 전달하여 결과를 변수 result에 저장한다.
# result 변수에 저장된 내용을 출력하여 사용자에게 보여준다.
"
학생 점수의 평균을 구하라.,"
def calculate_average(scores):
    total_score = sum(scores)
    number_of_scores = len(scores)
    average_score = total_score / number_of_scores
    return average_score

student_scores = [85, 90, 78, 92, 88]
average = calculate_average(student_scores)
print('Average score is:', average)
","  
# 'scores'라는 이름의 함수를 정의합니다.  
# 'scores' 리스트의 모든 점수를 더하여 총 점수를 계산합니다.  
# 'scores' 리스트의 항목 수(즉, 점수의 개수)를 계산합니다.  
# 총 점수를 점수의 개수로 나누어 평균 점수를 계산합니다.  
# 계산된 평균 점수를 반환합니다.  
# 학생들의 점수를 담고 있는 리스트를 정의합니다.  
# 'calculate_average' 함수를 호출하여 평균 점수를 계산합니다.  
# 계산된 평균 점수를 출력합니다.  
  "
사용자 이름으로 인사하라.,"
def greet_user(name):
    message = 'Hello, ' + name + '!'
    return message

user_name = input('Enter your name: ')
greeting = greet_user(user_name)
print(greeting)
","
# 사용자 이름을 입력받아 인사를 출력하는 함수를 정의합니다.
# 이름과 'Hello, '를 결합하여 인사 메시지를 생성합니다.
# 생성한 인사 메시지를 반환합니다.
# 사용자에게 이름을 입력하라는 메시지를 출력하고, 입력받은 값을 user_name 변수에 저장합니다.
# greet_user 함수를 호출하여 입력한 이름으로 인사 메시지를 생성하고, 결과를 greeting 변수에 저장합니다.
# 생성된 인사 메시지를 화면에 출력합니다.
"
사용자 이름과 나이를 입력받아 인사하라.,"
user_name = input('이름을 입력하세요: ')
user_age = input('나이를 입력하세요: ')
greeting_message = '안녕하세요, ' + user_name + '님!'
age_message = '당신은 ' + user_age + '세입니다.'
print(greeting_message)
print(age_message)
"," 
# 사용자에게 이름을 입력하라는 메시지를 표시하고, 입력된 이름을 user_name 변수에 저장한다.
# 사용자에게 나이를 입력하라는 메시지를 표시하고, 입력된 나이를 user_age 변수에 저장한다.
# 인사 메시지를 user_name과 함께 만들고 greeting_message 변수에 저장한다.
# 나이 메시지를 user_age와 함께 만들고 age_message 변수에 저장한다.
# 인사 메시지를 출력한다.
# 나이 메시지를 출력한다.
"
주어진 메시지를 출력하라!,"
def print_custom_message(message_list):
    print(*message_list, sep=', ', end='!\n')

messages = ['안녕하세요', '학생 여러분', ' 코딩을 시작합니다']
print_custom_message(messages)
","  
# 'print_custom_message'라는 함수를 정의합니다.  
# 이 함수는 'message_list'라는 매개변수를 받습니다.  
# 'print' 함수를 사용하여 'message_list'의 모든 요소를 출력합니다.  
# 각 요소는 ', '로 구분되며, 출력의 끝은 '!\n'입니다.  
# 'messages'라는 리스트를 정의하여 특정 메시지를 저장합니다.  
# 'print_custom_message' 함수를 호출하여 'messages'를 전달합니다.  
  "
두 수 a와 b의 연산 결과를 구하라.,"
def calculate_operations(a, b):
    addition = a + b
    subtraction = a - b
    multiplication = a * b
    division = a / b
    floor_division = a // b
    modulus = a % b
    exponentiation = a ** b
    
    return addition, subtraction, multiplication, division, floor_division, modulus, exponentiation

result = calculate_operations(10, 3)
print(result)
","
# 두 개의 숫자를 입력받아 다양한 계산을 수행하는 함수 정의입니다.
# 두 숫자의 합을 계산하여 변수에 저장합니다.
# 두 숫자의 차를 계산하여 변수에 저장합니다.
# 두 숫자의 곱을 계산하여 변수에 저장합니다.
# 두 숫자의 나눗셈 결과를 계산하여 변수에 저장합니다.
# 두 숫자의 정수 나눗셈 결과를 계산하여 변수에 저장합니다.
# 두 숫자의 나머지를 계산하여 변수에 저장합니다.
# 두 숫자의 제곱을 계산하여 변수에 저장합니다.
# 계산 결과를 모두 반환합니다.
# 주어진 숫자 10과 3으로 계산을 수행합니다.
# 계산 결과를 출력합니다.
"
초기값을 계산하여 결과를 출력하라.,"
def calculate_total(initial_value, addition, subtraction, multiplication, division):
    total = initial_value
    total += addition
    total -= subtraction
    total *= multiplication
    total /= division
    return total

result = calculate_total(10, 5, 2, 3, 2)
print('결과:', result)
","  
# 'calculate_total'라는 이름의 함수를 정의합니다.  
# 함수는 다섯 개의 매개변수를 입력받습니다: 초기 값, 추가할 값, 뺄 값, 곱할 값, 나눌 값.  
# 'total' 변수를 초기값으로 설정합니다.  
# 'addition' 값을 'total'에 더합니다.  
# 'subtraction' 값을 'total'에서 뺍니다.  
# 'multiplication' 값으로 'total'을 곱합니다.  
# 'division' 값으로 'total'을 나눕니다.  
# 계산된 'total' 값을 반환합니다.  
# 'calculate_total' 함수를 호출하여 결과를 'result' 변수에 저장합니다.  
# 'result' 변수의 값을 출력합니다.  
  "
number_one과 number_two를 비교하라.,"
def compare_numbers(number_one, number_two):
    if number_one == number_two:
        return '두 숫자는 같습니다.'
    elif number_one != number_two:
        return '두 숫자는 다릅니다.'
    elif number_one > number_two:
        return '첫 번째 숫자가 두 번째 숫자보다 큽니다.'
    else:
        return '첫 번째 숫자가 두 번째 숫자보다 작습니다.'

result = compare_numbers(10, 20)
print(result)
","# 두 숫자를 비교하는 함수를 정의합니다.  
# 첫 번째 숫자와 두 번째 숫자가 같은지 확인합니다.  
# 두 숫자가 같으면 동일하다는 문자열을 반환합니다.  
# 두 숫자가 다른 경우를 확인합니다.  
# 첫 번째 숫자가 두 번째 숫자보다 크면 해당 문자열을 반환합니다.  
# 그 외의 경우, 즉 첫 번째 숫자가 두 번째 숫자보다 작으면 해당 문자열을 반환합니다.  
# compare_numbers 함수를 호출하여 10과 20을 비교합니다.  
# 결과를 출력합니다.  "
a와 b의 진리값을 확인하라.,"
def check_conditions(a, b):
    if a and b:
        return 'Both are true'
    elif a or b:
        return 'At least one is true'
    else:
        return 'Both are false'

result = check_conditions(True, False)
print(result)
","  
# 두 개의 매개변수 a와 b를 받는 함수 check_conditions를 정의한다.
# a와 b가 모두 참인지 확인하는 조건문을 시작한다.
# a와 b가 모두 참이면 'Both are true'를 반환한다.
# a 또는 b 중 하나라도 참인지 확인하는 조건문으로 넘어간다.
# a 또는 b 중 하나라도 참이면 'At least one is true'를 반환한다.
# 위의 조건이 모두 거짓일 경우 실행되는 부분이다.
# 두 값 모두 거짓이면 'Both are false'를 반환한다.
# check_conditions 함수를 호출하고 매개변수로 True와 False를 전달하여 결과를 result 변수에 저장한다.
# result 변수의 값을 출력하여 결과를 화면에 표시한다.
"
비트 연산 결과를 출력하라.,"
def bitwise_operations(a, b):
    and_result = a & b
    or_result = a | b
    xor_result = a ^ b
    not_result_a = ~a
    left_shift = a << 1
    right_shift = a >> 1
    return and_result, or_result, xor_result, not_result_a, left_shift, right_shift

result = bitwise_operations(5, 3)
print(result)
","  
# 함수 bitwise_operations를 정의하고 두 개의 매개변수 a와 b를 받는다.  
# a와 b의 비트 AND 연산 결과를 and_result 변수에 저장한다.  
# a와 b의 비트 OR 연산 결과를 or_result 변수에 저장한다.  
# a와 b의 비트 XOR 연산 결과를 xor_result 변수에 저장한다.  
# a의 비트 NOT 연산 결과를 not_result_a 변수에 저장한다.  
# a를 왼쪽으로 1비트 쉬프트한 결과를 left_shift 변수에 저장한다.  
# a를 오른쪽으로 1비트 쉬프트한 결과를 right_shift 변수에 저장한다.  
# 각 계산 결과를 반환한다.  
# bitwise_operations 함수를 호출하여 5와 3의 비트 연산 결과를 result 변수에 저장한다.  
# result 변수를 출력하여 결과를 확인한다.  
  "
주어진 문자열에서 부분 문자열을 추출하라.,"
def extract_substring(input_string, start_index, end_index):
    return input_string[start_index:end_index]

user_string = '안녕하세요, 파이썬 프로그래밍!'
substring = extract_substring(user_string, 5, 10)
print(substring)
","
# 주어진 문자열에서 특정 부분 문자열을 추출하는 함수 정의입니다.
# 사용자로부터 문자열을 정의하는 변수입니다.
# 문자열에서 인덱스 5부터 10까지의 부분 문자열을 추출합니다.
# 추출한 부분 문자열을 출력합니다.
"
사용자 정보를 포맷하여 출력하라.,"
name = 'Alice'
age = 30
height = 5.5

formatted_string_f = f'Name: {name}, Age: {age}, Height: {height}ft'
formatted_string_format = 'Name: {}, Age: {}, Height: {}ft'.format(name, age, height)
formatted_string_percent = 'Name: %s, Age: %d, Height: %.1fft' % (name, age, height)

print(formatted_string_f)
print(formatted_string_format)
print(formatted_string_percent)
","   
# 변수 name에 문자열 'Alice'를 할당합니다.  
# 변수 age에 정수 30을 할당합니다.  
# 변수 height에 부동 소수점 숫자 5.5를 할당합니다.  
# 포맷팅된 문자열을 f-string을 사용하여 생성합니다.  
# 포맷팅된 문자열을 .format() 메서드를 사용하여 생성합니다.  
# 포맷팅된 문자열을 % 기호를 사용하여 생성합니다.  
# 첫 번째 포맷팅된 문자열을 출력합니다.  
# 두 번째 포맷팅된 문자열을 출력합니다.  
# 세 번째 포맷팅된 문자열을 출력합니다.  
  "
'bad'를 'good'으로 바꿔라.,"
def clean_string(input_string):
    trimmed_string = input_string.strip()
    replaced_string = trimmed_string.replace('bad', 'good')
    string_list = replaced_string.split()
    cleaned_string = ' '.join(string_list)
    return cleaned_string

result = clean_string('   This is a bad example.   ')
print(result)
","  
# 주어진 문자열을 정리하는 함수를 정의합니다.  
# 문자열의 앞뒤 공백을 제거합니다.  
# 'bad'라는 단어를 'good'으로 교체합니다.  
# 교체된 문자열을 공백을 기준으로 분리하여 리스트로 만듭니다.  
# 리스트의 요소들을 다시 공백으로 연결하여 문자열을 생성합니다.  
# 정리된 문자열을 반환합니다.  
# clean_string 함수를 호출하여 결과를 저장합니다.  
# 정리된 문자열을 출력합니다.  
  "
입력한 문자열의 길이를 구하라.,"
def get_string_length(input_string):
    string_length = len(input_string)
    return string_length

user_input = input('문자열을 입력하세요: ')
length_of_string = get_string_length(user_input)
print('입력한 문자열의 길이는', length_of_string, '입니다.')
","
# 입력된 문자열의 길이를 구하는 함수를 정의합니다.
# 입력된 문자열의 길이를 계산하여 string_length 변수에 저장합니다.
# 계산된 문자열의 길이를 반환합니다.

# 사용자에게 문자열을 입력하도록 요청합니다.
# 사용자가 입력한 문자열의 길이를 계산하기 위해 함수를 호출합니다.
# 계산된 문자열의 길이를 출력합니다.
"
이스케이프 문자를 출력하라.,"
def print_formatted_text():
    text = '안녕하세요!\n이것은 이스케이프 문자 예제입니다.\n이 줄은 탭으로 시작합니다:\t탭 문자입니다.'
    print(text)

print_formatted_text()
","# 함수를 정의합니다.  
# '안녕하세요!'라는 문자열을 정의합니다.   
# 여러 줄의 문자열을 정의하고, 이스케이프 문자를 포함합니다.  
# 정의된 문자열을 출력합니다.  
# 함수를 호출하여 정의한 내용을 실행합니다.  "
my_numbers의 합을 구하라.,"
def sum_of_numbers(number_list):
    total = 0
    for number in number_list:
        total += number
    return total

my_numbers = [1, 2, 3, 4, 5]
result = sum_of_numbers(my_numbers)
print('총 합:', result)
","# 주어진 리스트의 숫자들의 합을 계산하는 함수입니다.  
# 합계를 저장하기 위한 변수를 0으로 초기화합니다.  
# 리스트의 각 숫자를 반복하고 처리합니다.  
# 현재 숫자를 총합에 추가합니다.  
# 최종 합계를 반환합니다.  
# 숫자들의 리스트를 정의합니다.  
# 정의한 함수에 리스트를 전달하여 결과를 저장합니다.  
# 계산된 총합을 출력합니다.  "
my_list에서 start와 end로 부분 리스트를 추출하라.,"
def get_sublist(original_list, start_index, end_index):
    sublist = original_list[start_index:end_index]
    return sublist

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
start = 2
end = 5
result = get_sublist(my_list, start, end)
print(result)
","# 주어진 리스트에서 부분 리스트를 추출하는 함수 정의입니다.  
# 주어진 인덱스를 사용하여 원본 리스트에서 일부를 선택합니다.  
# 선택한 부분 리스트를 반환합니다.  
# 숫자가 들어있는 리스트를 정의합니다.  
# 부분 리스트의 시작 인덱스를 정의합니다.  
# 부분 리스트의 끝 인덱스를 정의합니다.  
# get_sublist 함수를 호출하여 부분 리스트를 얻습니다.  
# 결과를 출력합니다.  "
리스트에서 과일 관리하라.,"
def manage_list():
    my_list = []
    my_list.append('사과')
    my_list.append('바나나')
    my_list.insert(1, '체리')
    my_list.remove('바나나')
    popped_item = my_list.pop()
    return my_list, popped_item

result, removed = manage_list()
print('리스트:', result)
print('팝된 아이템:', removed)
","
# manage_list라는 이름의 함수를 정의합니다.
# 빈 리스트 my_list를 생성합니다.
# '사과'라는 문자열을 my_list에 추가합니다.
# '바나나'라는 문자열을 my_list에 추가합니다.
# 인덱스 1 위치에 '체리'라는 문자열을 삽입합니다.
# '바나나'라는 문자열을 my_list에서 제거합니다.
# my_list의 마지막 항목을 팝(popped)하여 popped_item 변수에 저장합니다.
# my_list와 popped_item을 반환합니다.

# manage_list 함수를 호출하여 결과를 result와 removed 변수에 저장합니다.
# result에 저장된 리스트를 출력합니다.
# removed에 저장된 팝된 아이템을 출력합니다.
"
my_list를 정렬하고 역순으로 출력하라.,"
def sort_and_reverse_list(input_list):
    sorted_list = sorted(input_list)
    reversed_list = sorted_list[::-1]
    return reversed_list

my_list = [5, 2, 9, 1, 5, 6]
result = sort_and_reverse_list(my_list)
print(result)
","
# 주어진 리스트를 정렬하는 함수를 정의합니다.

# 입력 리스트를 정렬하여 새로운 리스트를 만듭니다.

# 정렬된 리스트를 거꾸로 뒤집어서 새로운 리스트를 만듭니다.

# 뒤집힌 리스트를 반환합니다.

# 정수로 이루어진 리스트를 생성합니다.

# 생성한 리스트를 함수에 전달하여 정렬하고 뒤집습니다.

# 결과를 출력합니다.
"
'사과'의 인덱스와 개수를 출력하라.,"
def find_item_details(item_list, item):
    index = item_list.index(item)
    count = item_list.count(item)
    return f'아이템: {item}, 인덱스: {index}, 개수: {count}'

my_items = ['사과', '바나나', '사과', '체리', '바나나']
result = find_item_details(my_items, '사과')
print(result)
","  
# 주어진 아이템 목록과 아이템을 기반으로 아이템의 세부 정보를 찾는 함수를 정의합니다.  
# 아이템 목록에서 요청된 아이템의 인덱스를 찾습니다.  
# 아이템 목록에서 요청된 아이템의 개수를 계산합니다.  
# 아이템의 이름, 인덱스, 개수를 포함한 문자열을 반환합니다.  
# 아이템 목록을 정의합니다.  
# '사과'의 세부 정보를 찾기 위해 함수를 호출합니다.  
# 결과를 출력합니다.  
  "
'삭제할 요소'를 제거하고 '두번째'를 변경하라.,"
def modify_and_remove_elements(my_list):
    my_list[1] = '변경됨'
    my_list.remove('삭제할 요소')
    return my_list

original_list = ['첫번째', '두번째', '삭제할 요소', '세번째']
result_list = modify_and_remove_elements(original_list)
print(result_list)
","  
# 함수 'modify_and_remove_elements'를 정의한다. 
# 매개변수 'my_list'를 받아서 리스트를 수정하는 기능을 수행한다.  
# 리스트의 두 번째 요소(인덱스 1)를 '변경됨'으로 수정한다.  
# '삭제할 요소'라는 값을 리스트에서 제거한다.  
# 수정된 리스트를 반환한다.  
# 'original_list'라는 리스트를 정의하고 초기 값을 설정한다.  
# 'modify_and_remove_elements' 함수를 호출하여 'original_list'를 수정하고 결과를 저장한다.  
# 수정된 리스트인 'result_list'를 출력한다.  
  "
튜플의 요소를 접근하라.,"
def create_tuple_and_access_elements():
    my_tuple = (10, 20, 30, 40, 50)
    first_element = my_tuple[0]
    second_element = my_tuple[1]
    last_element = my_tuple[-1]
    return first_element, second_element, last_element

result = create_tuple_and_access_elements()
print('첫 번째 요소:', result[0])
print('두 번째 요소:', result[1])
print('마지막 요소:', result[2])
","
# 함수를 정의하여 튜플을 생성하고 요소에 접근하는 기능을 만듭니다.

# 숫자 10, 20, 30, 40, 50으로 구성된 튜플을 생성합니다.

# 튜플의 첫 번째 요소를 선택하여 변수에 저장합니다.

# 튜플의 두 번째 요소를 선택하여 변수에 저장합니다.

# 튜플의 마지막 요소를 선택하여 변수에 저장합니다.

# 선택한 세 요소를 반환합니다.

# 함수를 호출하여 튜플의 요소를 가져옵니다.

# 첫 번째 요소를 출력하기 위한 문장을 생성합니다.

# 두 번째 요소를 출력하기 위한 문장을 생성합니다.

# 마지막 요소를 출력하기 위한 문장을 생성합니다.
"
리스트와 튜플 비교하라.,"
def compare_tuple_and_list():
    my_list = [1, 2, 3]
    my_tuple = (1, 2, 3)
    
    my_list.append(4)
    my_tuple = my_tuple + (4,)
    
    return my_list, my_tuple

result_list, result_tuple = compare_tuple_and_list()
print('리스트:', result_list)
print('튜플:', result_tuple)
","   
# compare_tuple_and_list라는 함수를 정의합니다.   
# my_list라는 이름의 리스트를 [1, 2, 3]으로 초기화합니다.   
# my_tuple이라는 이름의 튜플을 (1, 2, 3)으로 초기화합니다.   
# my_list에 4라는 값을 추가합니다.   
# my_tuple에 4라는 값을 추가하여 새로운 튜플을 만듭니다.   
# my_list와 my_tuple을 반환합니다.   
# compare_tuple_and_list 함수를 호출하고 결과를 result_list와 result_tuple에 저장합니다.   
# '리스트:'라는 문자열과 result_list의 값을 출력합니다.   
# '튜플:'이라는 문자열과 result_tuple의 값을 출력합니다.   
  "
튜플의 요소를 출력하라.,"
def unpack_tuple(input_tuple):
    first_item, second_item, third_item = input_tuple
    return f'첫 번째: {first_item}, 두 번째: {second_item}, 세 번째: {third_item}'

my_tuple = ('사과', '바나나', '체리')
result = unpack_tuple(my_tuple)
print(result)
","  
# 함수 정의: 입력된 튜플을 언팩하는 함수입니다.  
# 튜플의 각 요소를 개별 변수에 할당합니다.  
# 함수가 문자열 형식으로 각 아이템을 반환합니다.  
# 튜플을 생성하여 세 가지 과일 이름을 포함합니다.  
# 튜플을 함수에 전달하여 결과를 변수에 저장합니다.  
# 저장된 결과를 출력하여 화면에 보여줍니다.  
  "
학생 점수를 딕셔너리로 만들라.,"
def create_dictionary():
    student_scores = {}
    student_scores['Alice'] = 85
    student_scores['Bob'] = 90
    student_scores['Charlie'] = 75
    return student_scores

scores = create_dictionary()
print(scores)
","# 함수 create_dictionary를 정의합니다. 
# 빈 딕셔너리 student_scores를 생성합니다. 
# 딕셔너리에 'Alice'라는 키에 85라는 값을 추가합니다. 
# 딕셔너리에 'Bob'이라는 키에 90라는 값을 추가합니다. 
# 딕셔너리에 'Charlie'라는 키에 75라는 값을 추가합니다. 
# student_scores 딕셔너리를 반환합니다. 
# create_dictionary 함수를 호출하여 scores 변수에 결과를 저장합니다. 
# scores 변수를 출력하여 학생들의 점수를 보여줍니다. "
과일 수량을 관리하라.,"
def manage_dictionary():
    my_dict = {'apple': 5, 'banana': 3}
    my_dict['orange'] = 7
    my_dict['banana'] = 4
    del my_dict['apple']
    return my_dict

result = manage_dictionary()
print(result)
","# manage_dictionary 함수를 정의합니다.  
# my_dict라는 딕셔너리를 초기화하여 과일과 그 수량을 저장합니다.  
# 'orange' 키를 추가하고 그 값을 7로 설정합니다.  
# 'banana' 키의 값을 4로 수정합니다.  
# 'apple' 키와 그 값을 딕셔너리에서 삭제합니다.  
# 수정된 딕셔너리를 반환합니다.  
# manage_dictionary 함수를 호출하여 결과를 result 변수에 저장합니다.  
# result 변수를 출력하여 딕셔너리의 내용을 보여줍니다.  "
sample_dict의 정보를 출력하라.,"
def display_dictionary_info(my_dictionary):
    print('Keys:', my_dictionary.keys())
    print('Values:', my_dictionary.values())
    print('Items:', my_dictionary.items())
    value = my_dictionary.get('sample_key', 'Not Found')
    print('Value for ""sample_key"":', value)

sample_dict = {'sample_key': 'sample_value', 'another_key': 'another_value'}
display_dictionary_info(sample_dict)
","  
# 'my_dictionary'라는 이름의 함수를 정의합니다.  
# 딕셔너리의 키를 출력합니다.  
# 딕셔너리의 값을 출력합니다.  
# 딕셔너리의 항목(키-값 쌍)을 출력합니다.  
# 'sample_key'의 값을 가져오고, 키가 없으면 'Not Found'를 반환합니다.  
# 'sample_key'의 값이 무엇인지 출력합니다.  
# 'sample_key'와 'sample_value'를 포함하는 딕셔너리를 생성합니다.  
# 생성한 딕셔너리를 'display_dictionary_info' 함수를 호출하여 전달합니다.  
  "
입력된 숫자의 제곱을 구하라.,"
def square_numbers(numbers):
    squared_dict = {num: num ** 2 for num in numbers}
    return squared_dict

input_numbers = [1, 2, 3, 4, 5]
result = square_numbers(input_numbers)
print(result)
","  
# 주어진 숫자 목록을 제곱하는 함수를 정의합니다.  
# 각 숫자를 키로 하고 그 숫자의 제곱을 값으로 가지는 사전을 생성합니다.  
# 숫자를 제곱한 결과를 포함하는 사전을 반환합니다.  
# 입력될 숫자의 목록을 정의합니다.  
# square_numbers 함수를 호출하여 입력 숫자 목록의 제곱사전을 생성합니다.  
# 계산된 결과를 출력합니다.  
"
고유한 숫자 집합을 생성하라.,"
def create_unique_numbers(numbers):
    unique_numbers = set(numbers)
    return unique_numbers

input_numbers = [1, 2, 2, 3, 4, 4, 5]
result = create_unique_numbers(input_numbers)
print('고유한 숫자 집합:', result)
","   
# 고유한 숫자를 생성하는 함수를 정의합니다.  
# 입력된 숫자 리스트에서 중복된 숫자를 제거하여 고유한 숫자를 저장합니다.  
# 고유한 숫자로 이루어진 집합을 반환합니다.  
# 입력할 숫자 리스트를 정의합니다.  
# 중복된 숫자를 포함한 리스트를 만듭니다.  
# 정의한 함수를 호출하여 고유한 숫자를 생성합니다.  
# 고유한 숫자 집합을 출력합니다.  
  "
집합 연산 결과를 출력하라.,"
def set_operations(set_a, set_b):
    union = set_a | set_b
    intersection = set_a & set_b
    difference_a_b = set_a - set_b
    difference_b_a = set_b - set_a
    return union, intersection, difference_a_b, difference_b_a

set_a = {1, 2, 3, 4}
set_b = {3, 4, 5, 6}
result = set_operations(set_a, set_b)
print('합집합:', result[0])
print('교집합:', result[1])
print('차집합 A-B:', result[2])
print('차집합 B-A:', result[3])
","
# 함수 set_operations를 정의하며 두 개의 집합(set_a, set_b)을 매개변수로 받습니다.

# 두 집합의 합집합을 계산하여 union 변수에 저장합니다.

# 두 집합의 교집합을 계산하여 intersection 변수에 저장합니다.

# set_a에서 set_b를 뺀 차집합 A-B를 계산하여 difference_a_b 변수에 저장합니다.

# set_b에서 set_a를 뺀 차집합 B-A를 계산하여 difference_b_a 변수에 저장합니다.

# 계산된 합집합, 교집합, 차집합 A-B, 차집합 B-A를 반환합니다.

# 집합 set_a를 {1, 2, 3, 4}로 초기화합니다.

# 집합 set_b를 {3, 4, 5, 6}으로 초기화합니다.

# set_operations 함수를 호출하여 결과를 result 변수에 저장합니다.

# 결과의 첫 번째 요소(합집합)를 출력합니다.

# 결과의 두 번째 요소(교집합)를 출력합니다.

# 결과의 세 번째 요소(차집합 A-B)를 출력합니다.

# 결과의 네 번째 요소(차집합 B-A)를 출력합니다.
"
주어진 숫자가 음수인지 확인하라.,"
def check_number(num):
    if num > 0:
        return '양수입니다'
    elif num < 0:
        return '음수입니다'
    else:
        return '0입니다'

result = check_number(-5)
print(result)
","# 함수를 정의하며 입력 값으로 num을 받습니다  
# num이 0보다 클 경우 '양수입니다'를 반환합니다  
# num이 0보다 작을 경우 '음수입니다'를 반환합니다  
# num이 0일 경우 '0입니다'를 반환합니다  
# check_number 함수에 -5를 전달하고 결과를 result 변수에 저장합니다  
# result 변수를 출력하여 결과를 보여줍니다  "
num1과 num2를 비교하라.,"
def compare_numbers(num1, num2):
    result = '첫 번째 숫자가 더 큽니다.' if num1 > num2 else '두 번째 숫자가 더 큽니다.' if num1 < num2 else '두 숫자는 같습니다.'
    return result

num1 = int(input('첫 번째 숫자를 입력하세요: '))
num2 = int(input('두 번째 숫자를 입력하세요: '))
print(compare_numbers(num1, num2))
","  
# 두 개의 숫자를 비교하는 함수를 정의합니다.  
# num1과 num2로 두 숫자를 받아서 비교합니다.  
# 두 숫자를 비교하여 첫 번째가 더 큰지, 두 번째가 더 큰지 또는 같은지를 판단합니다.  
# 결과를 문자열 형태로 저장합니다.  
# 결과 문자열을 함수의 실행 결과로 반환합니다.  
# 사용자에게 첫 번째 숫자를 입력하도록 요청하고, 입력한 값을 정수로 변환합니다.  
# 사용자에게 두 번째 숫자를 입력하도록 요청하고, 입력한 값을 정수로 변환합니다.  
# 두 숫자를 비교하는 함수의 결과를 출력합니다.  
  "
1부터 number까지의 합을 구하라.,"
def sum_of_numbers(n):
    total = 0
    for i in range(1, n + 1):
        total += i
    return total

number = 5
result = sum_of_numbers(number)
print('1부터', number, '까지의 합은', result, '입니다.')
","  
# 'n'이라는 입력 값을 받는 함수를 정의한다.

# 총합을 저장할 변수를 0으로 초기화한다.

# 1부터 n까지 반복하기 위한 반복문을 시작한다.

# 현재의 반복 변수 'i'를 total에 더한다.

# 반복이 끝난 후, total 값을 반환한다.

# 변수 'number'에 5를 할당하여 직접 사용할 숫자를 정의한다.

# sum_of_numbers 함수를 호출하고 그 결과를 'result'라는 변수에 저장한다.

# 1부터 'number'까지의 합계를 출력하기 위한 문장을 만든다.
  "
짝수 숫자를 출력하라.,"
def print_even_numbers(limit):
    for number in range(limit):
        if number % 2 == 0:
            print(number)

print_even_numbers(10)
","   
# 주어진 제한(limit)까지 짝수를 출력하는 함수 정의  
# 0부터 limit-1까지의 숫자를 반복하기 위한 루프 시작  
# 현재 숫자가 짝수인지 확인하기 위한 조건문 시작  
# 현재 숫자가 짝수이면 출력하기  
# 함수 호출로 10까지의 짝수를 출력  
"
과일 목록과 인덱스를 출력하라.,"
def print_fruits_with_index(fruit_list):
    for index, fruit in enumerate(fruit_list):
        print(f'Index {index}: {fruit}')

fruits = ['apple', 'banana', 'cherry', 'date']
print_fruits_with_index(fruits)
","  
# 주어진 리스트의 과일을 인덱스와 함께 출력하는 함수를 정의합니다.  
# 리스트의 각 과일과 그에 대한 인덱스를 반복합니다.  
# 인덱스와 과일 이름을 포맷하여 출력합니다.  
# 과일 목록을 리스트로 만듭니다.  
# 정의한 함수를 호출하여 과일 목록을 출력합니다.  
"
1부터 limit까지 숫자를 출력하라.,"
def print_numbers(limit):
    for number in range(1, limit + 1):
        if number == 5:
            continue
        if number == 10:
            break
        print(number)

print_numbers(10)
","# 'print_numbers'라는 함수를 정의합니다.  
# 매개변수 'limit'를 받아들입니다.  
# 1부터 'limit'까지 반복하는 루프를 시작합니다.  
# 현재 숫자가 5인 경우, 다음 숫자로 넘어갑니다.  
# 현재 숫자가 10인 경우, 루프를 종료합니다.  
# 현재 숫자를 출력합니다.  
# 'print_numbers' 함수를 호출하고 10을 인자로 전달합니다.  "
input_numbers의 제곱 리스트를 생성하라.,"
def create_squared_list(numbers):
    squared_list = [number ** 2 for number in numbers]
    return squared_list

input_numbers = [1, 2, 3, 4, 5]
result = create_squared_list(input_numbers)
print(result)
","  
# 함수 create_squared_list를 정의합니다.  
# numbers라는 매개변수를 사용하여 입력된 리스트를 받을 것입니다.  
# 입력된 숫자 각각의 제곱을 계산하여 새로운 리스트를 만듭니다.  
# 리스트 내포를 사용하여 각 number에 대해 제곱을 계산합니다.  
# 제곱한 숫자로 구성된 리스트를 반환합니다.  
# 변수 input_numbers에 1에서 5까지의 숫자를 리스트 형태로 저장합니다.  
# create_squared_list 함수를 호출하여 결과를 result에 저장합니다.  
# result에 저장된 리스트를 출력합니다.  
  "
이름과 나이를 결합하라.,"
def combine_names_and_ages(names, ages):
    combined_list = list(zip(names, ages))
    return combined_list

names = ['Alice', 'Bob', 'Charlie']
ages = [25, 30, 22]
result = combine_names_and_ages(names, ages)
print(result)
","  
# 이름과 나이를 결합하는 함수를 정의합니다.  
# 주어진 이름과 나이를 쌍으로 묶어서 리스트로 만듭니다.  
# 결합된 리스트를 반환합니다.  
# 이름과 나이의 리스트를 정의합니다.  
# 이름 리스트를 생성합니다.  
# 나이 리스트를 생성합니다.  
# 정의한 함수를 호출하여 이름과 나이를 결합합니다.  
# 결과를 출력하여 확인합니다.  
  "
짝수의 제곱을 구하라.,"
def square_even_numbers(numbers):
    even_numbers = filter(lambda x: x % 2 == 0, numbers)
    squared_even_numbers = map(lambda x: x ** 2, even_numbers)
    return list(squared_even_numbers)

input_numbers = [1, 2, 3, 4, 5, 6, 7, 8]
result = square_even_numbers(input_numbers)
print(result)
","# 주어진 숫자를 포함하는 리스트를 인자로 받는 함수를 정의합니다.  
# 리스트에서 짝수만 필터링하여 새로운 이터레이터를 생성합니다.  
# 필터링된 짝수를 제곱하는 새로운 이터레이터를 생성합니다.  
# 제곱된 짝수들을 리스트로 변환하여 반환합니다.  
# 입력 값으로 사용할 숫자 리스트를 정의합니다.  
# 함수에 입력 리스트를 전달하여 결과를 저장합니다.  
# 결과를 출력하여 짝수 제곱 값을 화면에 표시합니다.  "
이름 목록을 길이로 정렬하라.,"
def sort_names_by_length(names):
    sorted_names = sorted(names, key=len)
    return sorted_names

name_list = ['Alice', 'Bob', 'Charlotte', 'Dave']
sorted_list = sort_names_by_length(name_list)
print(sorted_list)
","  
# 이름의 길이에 따라 정렬하는 함수를 정의합니다.  
# 주어진 이름 목록을 길이에 따라 정렬하여 새로운 목록을 만듭니다.  
# 정렬된 이름 목록을 반환합니다.  
# 이름 목록을 정의합니다.  
# 이름 목록을 함수에 전달하여 길이에 따라 정렬합니다.  
# 정렬된 이름 목록을 출력합니다.  
  "
정렬된 리스트에서 5의 인덱스를 찾으세요.,"
import bisect

def binary_search(sorted_list, target):
    index = bisect.bisect_left(sorted_list, target)
    if index < len(sorted_list) and sorted_list[index] == target:
        return index
    return -1

my_list = [1, 3, 5, 7, 9]
result = binary_search(my_list, 5)
print('5의 인덱스는', result, '입니다.')
","  
# bisect 모듈을 임포트하여 이진 검색 기능을 사용합니다.  
# 정렬된 리스트와 찾고자 하는 값을 인자로 받는 함수를 정의합니다.  
# bisect_left 함수를 사용하여 타겟의 인덱스를 찾습니다.  
# 찾은 인덱스가 리스트의 크기보다 작고 해당 인덱스의 값이 타겟과 같다면, 인덱스를 반환합니다.  
# 조건을 만족하지 않으면 -1을 반환하여 타겟이 없음을 표시합니다.  
# 정렬된 리스트를 정의하여 이진 검색을 수행할 데이터를 준비합니다.  
# 정의된 이진 검색 함수를 호출하여 결과를 'result' 변수에 저장합니다.  
# 결과를 출력하여 타겟 값의 인덱스를 사용자에게 보여줍니다.  
  "
사용자 이름으로 인사하라.,"
def greet_user(name):
    greeting_message = 'Hello, ' + name + '! Welcome to the  world.'
    return greeting_message

user_name = 'Alice'
print(greet_user(user_name))
","# 사용자를 맞이하는 함수 'greet_user'를 정의합니다.  
# 함수에 전달된 이름과 함께 인사 메시지를 생성합니다.  
# 생성된 인사 메시지를 반환합니다.  
# 사용자 이름을 'Alice'로 설정합니다.  
# 'greet_user' 함수를 호출하여 인사 메시지를 출력합니다.  "
사용자 이름으로 인사하라.,"
def greet_user(name='학생'):
    greeting_message = '안녕하세요, ' + name + '님!'
    return greeting_message

user_name = input('이름을 입력하세요: ')
print(greet_user(user_name))
","  
# 사용자에게 인사를 하는 함수를 정의합니다.  
# 기본 이름으로 '학생'을 설정합니다.  
# 인사 메시지를 생성하여 이름을 포함시킵니다.  
# 생성된 인사 메시지를 반환합니다.  
# 사용자에게 이름을 입력하라는 메시지를 표시합니다.  
# 입력된 이름을 사용하여 인사 메시지를 출력합니다.  
  "
주어진 숫자의 합을 구하라.,"
def calculate_sum(*numbers):
    total = 0
    for number in numbers:
        total += number
    return total

result = calculate_sum(1, 2, 3, 4, 5)
print('The sum is:', result)
","plaintext
# 다양한 숫자를 인자로 받는 함수를 정의합니다.
# 합계를 저장할 변수를 0으로 초기화합니다.
# 전달받은 숫자 목록을 반복합니다.
# 각 숫자를 total에 추가합니다.
# 최종 합계를 반환합니다.
# calculate_sum 함수를 호출하여 1, 2, 3, 4, 5의 합계를 계산합니다.
# 계산된 합계를 출력하는 메시지를 표시합니다.
"
numbers의 제곱을 구하라.,"
def apply_function_to_list(numbers, function):
    result = []
    for number in numbers:
        result.append(function(number))
    return result

numbers = [1, 2, 3, 4, 5]
squared_numbers = apply_function_to_list(numbers, lambda x: x ** 2)
print(squared_numbers)
","# 주어진 리스트에 함수를 적용하는 함수를 정의합니다.

# 결과를 저장할 빈 리스트를 생성합니다.

# 주어진 숫자 리스트에서 각 숫자에 대해 반복합니다.

# 현재 숫자에 함수를 적용한 결과를 결과 리스트에 추가합니다.

# 결과 리스트를 반환합니다.

# 숫자 1부터 5까지의 리스트를 생성합니다.

# apply_function_to_list 함수를 호출하여 각 숫자를 제곱합니다.

# 제곱된 숫자 리스트를 출력합니다."
0으로 나누기 방지하라.,"
def divide_numbers(numerator, denominator):
    try:
        result = numerator / denominator
        return result
    except ZeroDivisionError:
        return 'Error: Division by zero is not allowed.'
    finally:
        print('Function execution finished.')

print(divide_numbers(10, 2))
print(divide_numbers(10, 0))
","# 두 개의 숫자를 나누는 함수를 정의합니다.  
# 나누기를 시도하고 결과를 result 변수에 저장합니다.  
# 나눈 결과를 반환합니다.  
# 분모가 0일 경우 발생하는 예외를 처리합니다.  
# '0으로 나눌 수 없습니다.'라는 에러 메시지를 반환합니다.  
# 함수 실행이 끝났음을 나타내는 메시지를 출력합니다.  
# 10을 2로 나누는 결과를 출력합니다.  
# 10을 0으로 나누는 경우의 결과를 출력합니다.  "
사용자가 입력한 age_input으로 나이를 확인하라.,"
def check_age(age):
    if age < 0:
        raise ValueError('나이는 0보다 작을 수 없습니다.')
    elif age < 18:
        return '미성년자입니다.'
    else:
        return '성인입니다.'

try:
    age_input = int(input('나이를 입력하세요: '))
    result = check_age(age_input)
    print(result)
except ValueError as e:
    print(e)
","# 입력된 나이를 확인하는 함수 정의입니다.  
# 나이가 0보다 작은 경우 예외를 발생시킵니다.  
# 나이가 18세 미만인 경우 '미성년자입니다.'를 반환합니다.  
# 나이가 18세 이상인 경우 '성인입니다.'를 반환합니다.  
# 사용자에게 나이를 입력하라고 요청합니다.  
# 입력된 값을 정수로 변환하여 age_input 변수에 저장합니다.  
# check_age 함수를 호출하여 결과를 result 변수에 저장합니다.  
# 결과를 출력합니다.  
# ValueError 예외가 발생하면 에러 메시지를 출력합니다.  "
기존 내용을 읽고 추가하라.,"
def read_and_append_file(file_name, new_content):
    with open(file_name, 'r') as file:
        existing_content = file.read()
    
    with open(file_name, 'a') as file:
        file.write(new_content + '\n')
    
    return existing_content

file_name = 'example.txt'
new_content = '이것은 새로운 내용입니다.'
previous_content = read_and_append_file(file_name, new_content)
print(previous_content)
","  
# 주어진 파일 이름과 새로운 내용을 받아서 파일을 읽고 추가하는 함수를 정의합니다.  
# 파일을 읽기 모드('r')로 열고, 해당 파일의 내용을 변수에 저장합니다.  
# 파일을 추가 모드('a')로 열고, 새로운 내용을 파일에 추가합니다.  
# 새로운 내용 뒤에 줄 바꿈 문자를 추가하여 파일에 씁니다.  
# 읽어온 기존의 파일 내용을 반환합니다.  
# 파일 이름을 'example.txt'로 설정합니다.  
# 추가할 내용을 '이것은 새로운 내용입니다.'로 설정합니다.  
# 이전 파일 내용을 읽고 추가한 결과를 변수에 저장합니다.  
# 저장된 이전 파일 내용을 출력합니다.  
  "
'example.txt' 파일의 내용을 출력하라.,"
def read_file_lines(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    return lines

def main():
    filename = 'example.txt'
    lines = read_file_lines(filename)
    for line in lines:
        print(line.strip())

main()
","
# 파일 이름을 입력으로 받아 파일의 내용을 읽는 함수 정의입니다.
# 'filename' 변수에 지정된 파일을 읽기 모드로 엽니다.
# 파일에서 모든 줄을 읽어 'lines' 변수에 저장합니다.
# 읽은 줄들을 반환합니다.

# 프로그램의 주 함수를 정의합니다.
# 'example.txt'라는 파일 이름을 변수에 저장합니다.
# 'read_file_lines' 함수를 호출하여 파일의 줄을 읽습니다.
# 읽은 줄에서 공백을 제거하고 각각의 줄을 출력하는 반복문입니다.

# 프로그램의 실행 시작 지점입니다.
"
JSON 파일을 읽고 쓰세요.,"
import json

def read_json_file(file_name):
    with open(file_name, 'r') as file:
        data = json.load(file)
    return data

def write_json_file(file_name, data):
    with open(file_name, 'w') as file:
        json.dump(data, file)

data_to_write = {'name': 'Alice', 'age': 30}
write_json_file('data.json', data_to_write)
read_data = read_json_file('data.json')
print(read_data)
","  
#import json 모듈을 불러옵니다.
  
#read_json_file이라는 함수를 정의합니다.  
  
#파일 이름을 매개변수로 받습니다.  
  
#주어진 파일 이름으로 파일을 읽기 모드로 엽니다.  
  
#파일을 파일 객체로 지정합니다.  
  
#JSON 형식의 데이터를 파일에서 읽어옵니다.  
  
#읽어온 데이터를 반환합니다.  
  
#write_json_file이라는 함수를 정의합니다.  
  
#파일 이름과 데이터를 매개변수로 받습니다.  
  
#주어진 파일 이름으로 파일을 쓰기 모드로 엽니다.  
  
#파일을 파일 객체로 지정합니다.  
  
#주어진 데이터를 JSON 형식으로 파일에 저장합니다.  
  
#딕셔너리를 만들어 데이터를 정의합니다.  
  
#write_json_file 함수를 호출하여 데이터 파일에 저장합니다.  
  
#read_json_file 함수를 호출하여 파일에서 데이터를 읽어옵니다.  
  
#print 함수를 사용하여 읽어온 데이터를 출력합니다.  
  "
개 이름과 나이를 출력하라.,"
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        return '멍멍!'

my_dog = Dog('바둑이', 3)
print(my_dog.name)
print(my_dog.age)
print(my_dog.bark())
","plaintext
# 'Dog'라는 이름의 클래스를 정의합니다.
# 생성자 메서드인 __init__을 정의하고, 이름과 나이를 초기화합니다.
# self.name 속성에 이름을 저장합니다.
# self.age 속성에 나이를 저장합니다.
# 개가 짖는 행동을 정의하는 메서드인 bark를 만듭니다.
# '멍멍!'이라는 문자열을 반환합니다.
# '바둑이'라는 이름과 3세인 Dog 객체를 생성합니다.
# my_dog 객체의 이름 속성을 출력합니다.
# my_dog 객체의 나이 속성을 출력합니다.
# my_dog 객체의 bark 메서드를 호출하여 결과를 출력합니다.
"
애완동물 생성 및 삭제하라.,"
class Animal:
    def __init__(self, name):
        self.name = name
        print(f'Animal {self.name} is created.')

    def __del__(self):
        print(f'Animal {self.name} is destroyed.')

my_pet = Animal('Buddy')
del my_pet
","# Animal 클래스를 정의한다.  
# 생성자 메서드 __init__을 정의하여 이름을 초기화한다.  
# 객체가 생성될 때 이름을 출력한다.  
# 소멸자 메서드 __del__을 정의하여 객체가 파괴될 때 호출된다.  
# 객체가 파괴될 때 이름을 출력한다.  
# 'Buddy'라는 이름으로 Animal 객체를 생성하여 my_pet에 할당한다.  
# my_pet 객체를 삭제하여 소멸자 메서드를 호출한다.  "
차의 색상과 바퀴 수를 출력하라.,"
class Car:
    wheels = 4

    def __init__(self, color):
        self.color = color

    def display_info(self):
        return f'이 차는 {self.color} 색이며, 바퀴가 {Car.wheels}개 있습니다.'

my_car = Car('파란색')
print(my_car.display_info())
"," 
# 자동차를 나타내는 Car 클래스를 정의합니다.

# 자동차는 기본적으로 4개의 바퀴를 가지고 있습니다.

# 생성자이며, 자동차의 색상을 초기화합니다.

# 색상이 주어진 자동차의 색상을 self.color에 저장합니다.

# 자동차의 정보를 반환하는 display_info 메서드를 정의합니다.

# 자동차의 색상과 바퀴 수를 포함한 정보를 문자열로 만듭니다.

# '파란색' 색상의 새로운 자동차 객체를 생성합니다.

# 생성한 자동차의 정보를 출력합니다.
"
사용자 이름으로 인사 메시지를 생성하라.,"
def greet_user(name):
    greeting_message = '안녕하세요, ' + name + '!'
    return greeting_message

user_name = '홍길동'
message = greet_user(user_name)
print(message)
","
# 사용자 이름을 인자로 받아서 인사하는 함수 정의

# 인사 메시지를 사용자 이름과 함께 생성

# 생성된 인사 메시지를 반환

# 사용자 이름을 '홍길동'으로 정의

# greet_user 함수를 호출하여 사용자 이름을 전달하고 메시지를 생성함

# 생성된 메시지를 출력
"
강아지의 이름과 나이를 설정하라.,"
class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        return f'{self.name} says woof!'

my_dog = Dog('Buddy', 3)
print(my_dog.bark())
","  
# Dog 클래스를 정의합니다.  
# 생성자 메서드 __init__을 정의하여 개의 이름과 나이를 초기화합니다.  
# 이름과 나이를 인스턴스 변수에 저장합니다.  
# bark 메서드를 정의하여 개가 짖는 소리를 반환합니다.  
# 인스턴스를 생성하며 'Buddy'라는 이름과 3세로 초기화합니다.  
# my_dog의 bark 메서드를 호출하고 그 결과를 출력합니다.  
  "
동물의 소리를 출력하라.,"
class Animal:
    def speak(self):
        return 'Animal sound'

class Dog(Animal):
    def speak(self):
        return 'Woof!'

class Cat(Animal):
    def speak(self):
        return 'Meow!'

def animal_sound(animal):
    return animal.speak()

dog = Dog()
cat = Cat()
print(animal_sound(dog))
print(animal_sound(cat))
","   
# Animal이라는 클래스를 정의합니다.   
# speak 메서드를 정의하며, 'Animal sound'를 반환합니다.   

# Dog 클래스는 Animal 클래스를 상속받습니다.   
# speak 메서드를 재정의하여 'Woof!'를 반환합니다.   

# Cat 클래스도 Animal 클래스를 상속받습니다.   
# speak 메서드를 재정의하여 'Meow!'를 반환합니다.   

# animal_sound 함수는 animal 매개변수를 받아 해당 animal의 speak 메서드를 호출합니다.   
# animal의 speak 메서드의 반환값을 그대로 반환합니다.   

# Dog 클래스의 인스턴스를 생성하여 dog 변수에 저장합니다.   
# Cat 클래스의 인스턴스를 생성하여 cat 변수에 저장합니다.   

# dog의 소리를 출력하기 위해 animal_sound 함수를 호출하고 결과를 출력합니다.   
# cat의 소리를 출력하기 위해 animal_sound 함수를 호출하고 결과를 출력합니다.   
  "
동물의 소리를 출력하라.,"
from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def sound(self):
        pass

class Dog(Animal):
    def sound(self):
        return '멍멍'

class Cat(Animal):
    def sound(self):
        return '야옹'

def make_sound(animal):
    return animal.sound()

dog = Dog()
cat = Cat()
print(make_sound(dog))
print(make_sound(cat))
","
# ABC 모듈에서 ABC와 abstractmethod를 가져옵니다.

# Animal이라는 추상 클래스를 정의합니다.
# 이 클래스는 Animal 타입의 객체가 가져야 할 메서드를 정의합니다.
class Animal(ABC):
    # 모든 Animal 클래스가 반드시 구현해야 할 추상 메서드 sound를 정의합니다.
    @abstractmethod
    def sound(self):
        # 이 메서드는 구현되지 않고, 서브클래스에서 구현됩니다.
        pass

# Animal 클래스를 상속받는 Dog 클래스를 정의합니다.
class Dog(Animal):
    # Dog 클래스에서 sound 메서드를 구현하여 '멍멍'을 반환합니다.
    def sound(self):
        return '멍멍'

# Animal 클래스를 상속받는 Cat 클래스를 정의합니다.
class Cat(Animal):
    # Cat 클래스에서 sound 메서드를 구현하여 '야옹'을 반환합니다.
    def sound(self):
        return '야옹'

# 동물 객체를 받아서 해당 동물의 소리를 반환하는 함수를 정의합니다.
def make_sound(animal):
    return animal.sound()  # animal의 sound 메서드를 호출하여 소리를 반환합니다.

# Dog 클래스의 인스턴스를 생성하여 dog 변수에 저장합니다.
dog = Dog()

# Cat 클래스의 인스턴스를 생성하여 cat 변수에 저장합니다.
cat = Cat()

# make_sound 함수를 호출하여 dog의 소리를 출력합니다.
print(make_sound(dog))

# make_sound 함수를 호출하여 cat의 소리를 출력합니다.
print(make_sound(cat))
"
책 제목과 저자를 출력하라.,"
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

    def __str__(self):
        return f'\'{self.title}\' by {self.author}'

    def __len__(self):
        return len(self.title)

my_book = Book('1984', 'George Orwell')
print(my_book)
print('Length of title:', len(my_book))
","   
# Book 클래스를 정의합니다.  
# 초기화 메서드로 제목과 저자를 설정합니다.  
# 클래스 문자열 표현을 정의하여 제목과 저자를 반환합니다.  
# 제목의 길이를 반환하는 메서드를 정의합니다.  
# Book 클래스의 인스턴스를 생성하며 제목과 저자를 지정합니다.  
# 생성된 인스턴스를 출력하여 책 정보를 표시합니다.  
# 책 제목의 길이를 출력합니다.  
  "
반지름으로 원의 면적을 구하라.,"
import math

def calculate_circle_area(radius):
    area = math.pi * radius ** 2
    return area

def main():
    radius = 5
    area = calculate_circle_area(radius)
    print('The area of the circle with radius', radius, 'is', area)

main()
","  
# math 모듈을 임포트하여 수학 관련 기능을 사용 가능하게 한다.  

# 원의 면적을 계산하는 함수를 정의한다.  

# 주어진 반지름을 사용하여 원의 면적을 계산한다.  

# 면적을 반환한다.  

# 메인 함수를 정의한다.  

# 반지름을 5로 설정한다.  

# calculate_circle_area 함수를 호출하여 면적을 계산한다.  

# 계산된 면적을 출력하여 화면에 표시한다.  

# 메인 함수를 실행하여 프로그램을 시작한다.  
"
사용자가 숫자를 추측하게 하라.,"
import random

def generate_random_number():
    random_number = random.randint(1, 100)
    return random_number

def check_guess(user_guess, random_number):
    if user_guess < random_number:
        return '너의 추측이 너무 낮아!'
    elif user_guess > random_number:
        return '너의 추측이 너무 높아!'
    else:
        return '정답! 숫자를 맞혔습니다.'

random_number = generate_random_number()
user_guess = int(input('1부터 100 사이의 숫자를 추측해보세요: '))
result = check_guess(user_guess, random_number)
print(result)
","
# random 모듈을 임포트하여 난수 생성을 가능하게 합니다.

# 난수를 생성하는 함수를 정의합니다.
def generate_random_number():
    # 1부터 100 사이의 난수를 생성합니다.
    random_number = random.randint(1, 100)
    # 생성된 난수를 반환합니다.
    return random_number

# 사용자의 추측을 확인하는 함수를 정의합니다.
def check_guess(user_guess, random_number):
    # 사용자의 추측이 난수보다 낮은 경우의 조건입니다.
    if user_guess < random_number:
        # 추측이 낮다는 메시지를 반환합니다.
        return '너의 추측이 너무 낮아!'
    # 사용자의 추측이 난수보다 높은 경우의 조건입니다.
    elif user_guess > random_number:
        # 추측이 높다는 메시지를 반환합니다.
        return '너의 추측이 너무 높아!'
    # 위의 조건이 모두 아닌 경우, 즉 정답의 경우입니다.
    else:
        # 정답을 맞혔다는 메시지를 반환합니다.
        return '정답! 숫자를 맞혔습니다.'

# 난수를 생성하여 random_number 변수에 저장합니다.
random_number = generate_random_number()
# 사용자에게 숫자를 입력받아 user_guess 변수에 저장합니다.
user_guess = int(input('1부터 100 사이의 숫자를 추측해보세요: '))
# 사용자의 추측을 확인하고 결과를 result 변수에 저장합니다.
result = check_guess(user_guess, random_number)
# 결과를 출력합니다.
print(result)
"
input_numbers의 평균을 구하라.,"
def calculate_average(numbers):
    total = sum(numbers)
    average = total / len(numbers)
    return average

input_numbers = [10, 20, 30, 40, 50]
result = calculate_average(input_numbers)
print('The average is', result)
","  
# calculate_average 함수를 정의한다.  
# 주어진 numbers 리스트의 합계를 계산한다.  
# numbers 리스트의 길이로 합계를 나누어 평균을 구한다.  
# 계산한 평균 값을 반환한다.  
# 평균을 계산할 숫자 리스트를 선언한다.  
# calculate_average 함수를 호출하여 평균을 계산하고 결과를 저장한다.  
# 결과를 출력한다.  
  "
"리스트, 튜플, 딕셔너리 출력하라.","
my_list = [1, 2, 3, 4, 5]
my_tuple = (6, 7, 8, 9, 10)
my_dict = {'a': 11, 'b': 12, 'c': 13}

for number in my_list:
    print('List number:', number)

for number in my_tuple:
    print('Tuple number:', number)

for key, value in my_dict.items():
    print('Dictionary key:', key, 'Value:', value)
","# my_list라는 변수에 1부터 5까지의 숫자를 리스트 형태로 저장한다.

# my_tuple이라는 변수에 6부터 10까지의 숫자를 튜플 형태로 저장한다.

# my_dict라는 변수에 키와 값의 쌍으로 구성된 딕셔너리를 저장한다.

# my_list의 각 숫자를 반복하기 위한 for 루프를 시작한다.

# 현재 반복 중인 리스트의 숫자를 출력한다.

# my_tuple의 각 숫자를 반복하기 위한 for 루프를 시작한다.

# 현재 반복 중인 튜플의 숫자를 출력한다.

# my_dict의 키와 값을 반복하기 위한 for 루프를 시작한다.

# 현재 반복 중인 딕셔너리의 키와 값을 출력한다."
주어진 숫자 리스트를 정렬하라.,"
def sort_numbers(number_list):
    sorted_list = sorted(number_list)
    return sorted_list

numbers = [5, 2, 9, 1, 5, 6]
sorted_numbers = sort_numbers(numbers)
print('정렬된 리스트:', sorted_numbers)
","# 숫자 리스트를 정렬하는 함수를 정의합니다.  
# 주어진 숫자 리스트를 정렬하여 새로운 리스트를 생성합니다.  
# 정렬된 리스트를 반환합니다.  
# 정렬할 숫자들을 포함하는 리스트를 만듭니다.  
# sort_numbers 함수를 호출하여 숫자를 정렬합니다.  
# 정렬된 리스트를 출력합니다.  "
문자열 'hello world'의 문자 개수를 세어라.,"
from collections import Counter

def count_characters(input_string):
    character_count = Counter(input_string)
    return character_count

user_input = 'hello world'
result = count_characters(user_input)
print(result)
"," 
# Counter 클래스를 가져와서 문자 카운트를 쉽게 처리할 수 있도록 준비한다.

# 입력된 문자열의 문자의 개수를 세는 함수를 정의한다.

# 입력 문자열의 각 문자 빈도를 계산하여 character_count 변수에 저장한다.

# 계산된 문자 빈도 테이블을 반환한다.

# 사용자로부터 'hello world'라는 문자열을 저장한다.

# count_characters 함수를 호출하여 사용자 입력의 문자 개수를 센 결과를 result 변수에 저장한다.

# 결과를 출력하여 각 문자의 개수를 보여준다.
"
덧셈과 곱셈 결과를 출력하라.,"
class MathOperations:
    @staticmethod
    def add_numbers(a, b):
        return a + b

    @classmethod
    def multiply_numbers(cls, a, b):
        return a * b

result_add = MathOperations.add_numbers(5, 3)
result_multiply = MathOperations.multiply_numbers(4, 2)

print('Addition Result:', result_add)
print('Multiplication Result:', result_multiply)
","
# MathOperations라는 이름의 클래스를 정의합니다.

# add_numbers라는 정적 메서드를 정의하여 두 숫자를 더합니다.

# multiply_numbers라는 클래스 메서드를 정의하여 두 숫자를 곱합니다.

# add_numbers 메서드를 호출하여 5와 3을 더하고 결과를 result_add에 저장합니다.

# multiply_numbers 메서드를 호출하여 4와 2를 곱하고 결과를 result_multiply에 저장합니다.

# 'Addition Result:'라는 문자열과 result_add 값을 출력합니다.

# 'Multiplication Result:'라는 문자열과 result_multiply 값을 출력합니다.
"
1부터 최대 숫자까지 출력하라.,"
def 숫자_제너레이터(최대_숫자):
    현재_숫자 = 1
    while 현재_숫자 <= 최대_숫자:
        yield 현재_숫자
        현재_숫자 += 1

제너레이터 = 숫자_제너레이터(5)
for 숫자 in 제너레이터:
    print('현재 숫자는:', 숫자)
","
# '숫자_제너레이터'라는 함수를 정의하며 최대 숫자를 매개변수로 받습니다.
# '현재_숫자' 변수를 1로 초기화하여 제너레이터의 시작 숫자를 설정합니다.
# '현재_숫자'가 '최대_숫자'보다 작거나 같은 동안 반복합니다.
# 현재의 '현재_숫자' 값을 호출하는 쪽에 제공하기 위해 'yield' 키워드를 사용합니다.
# '현재_숫자' 값을 1 증가시켜 다음 숫자를 준비합니다.
# '숫자_제너레이터' 함수를 호출해 최대 숫자를 5로 설정하여 제너레이터 객체를 생성합니다.
# 생성된 제너레이터를 사용하여 숫자를 하나씩 반복합니다.
# 현재 숫자를 출력하기 위해 'print' 함수를 호출하면서 형식을 지정합니다.
"
0부터 max_number까지 출력하라.,"
class NumberIterator:
    def __init__(self, max_number):
        self.max_number = max_number
        self.current_number = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.current_number < self.max_number:
            number = self.current_number
            self.current_number += 1
            return number
        else:
            raise StopIteration

for number in NumberIterator(5):
    print(number)
","# NumberIterator 클래스를 정의합니다.

# 생성자 메서드로, 최대 숫자를 초기화합니다.
# 현재 숫자를 0으로 설정합니다.

# 이터레이터 객체를 반환하는 메서드입니다.
# 클래스의 인스턴스를 이터레이터로 사용할 수 있게 합니다.

# 다음 숫자를 반환하는 메서드입니다.
# 현재 숫자가 최대 숫자보다 작은지 확인합니다.

# 현재 숫자를 반환하고, 현재 숫자를 1 증가시킵니다.

# 최대 숫자에 도달하면 StopIteration 예외를 발생시킵니다.

# 0부터 4까지의 숫자를 출력하기 위해 NumberIterator를 사용합니다.
# 각 숫자를 출력하는 반복문입니다."
5개의 숫자를 출력하라.,"
import threading
import time

def print_number(number):
    time.sleep(1)
    print('Number:', number)

threads = []
for i in range(5):
    thread = threading.Thread(target=print_number, args=(i,))
    threads.append(thread)
    thread.start()

for thread in threads:
    thread.join()
","  
# threading 모듈을 임포트하여 스레드를 사용할 수 있게 한다.  
# time 모듈을 임포트하여 시간 관련 기능을 사용할 수 있게 한다.  
# 숫자를 출력하는 함수를 정의한다.  
# 1초 동안 대기하여 출력의 간격을 둔다.  
# 전달받은 숫자를 출력한다.  
# 빈 리스트를 생성하여 스레드를 저장할 준비를 한다.  
# 0부터 4까지 반복하여 5회를 실행한다.  
# 새로운 스레드를 생성하여 print_number 함수를 타겟으로 설정한다.  
# 현재 숫자를 스레드에 인자로 전달한다.  
# 생성한 스레드를 리스트에 추가한다.  
# 스레드를 시작하여 실행하게 한다.  
# 모든 스레드의 실행이 완료될 때까지 기다린다.  
  "
주어진 숫자의 제곱을 구하라.,"
import multiprocessing

def square_number(number):
    return number * number

if __name__ == '__main__':
    numbers = [1, 2, 3, 4, 5]
    with multiprocessing.Pool() as pool:
        squared_numbers = pool.map(square_number, numbers)
    print('결과:', squared_numbers)
","
# multiprocessing 모듈을 임포트하여 병렬 처리를 사용할 준비를 한다.

# 주어진 숫자를 제곱하는 함수를 정의한다.
def square_number(number):
    # 입력된 숫자에 대해 제곱을 계산하여 반환한다.
    return number * number

# 이 스크립트가 직접 실행될 때만 아래 코드를 실행한다.
if __name__ == '__main__':
    # 제곱할 숫자들의 리스트를 만든다.
    numbers = [1, 2, 3, 4, 5]
    # 프로세스 풀을 사용하여 병렬 처리 준비를 한다.
    with multiprocessing.Pool() as pool:
        # 리스트에 있는 각 숫자를 제곱하는 작업을 병렬로 수행한다.
        squared_numbers = pool.map(square_number, numbers)
    # 제곱된 결과를 출력한다.
    print('결과:', squared_numbers)
"
웹사이트의 내용을 가져오라.,"
import requests

def fetch_website_content(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        return 'Error: Unable to fetch content'

url = 'http://example.com'
content = fetch_website_content(url)
print(content)
","
# requests 라이브러리를 가져옵니다.

# 웹사이트의 콘텐츠를 가져오는 함수를 정의합니다.
# url 매개변수를 통해 요청할 웹사이트의 주소를 전달합니다.

# 주어진 URL에 대해 GET 요청을 실행합니다.

# 요청이 성공했는지 상태 코드를 확인합니다.

# 상태 코드가 200이면 요청이 성공한 것으로, 웹사이트의 내용을 반환합니다.

# 상태 코드가 200이 아니면 오류 메시지를 반환합니다.

# 요청할 웹사이트의 URL을 정의합니다.

# fetch_website_content 함수를 호출하여 웹사이트의 콘텐츠를 가져옵니다.

# 가져온 콘텐츠를 출력합니다.
"
웹페이지의 제목을 출력하라.,"
import requests
from bs4 import BeautifulSoup

url = 'http://example.com'
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

titles = soup.find_all('h1')
for title in titles:
    print(title.get_text())
","# requests 모듈을 임포트하여 HTTP 요청을 처리합니다.  
# BeautifulSoup 모듈을 임포트하여 HTML을 파싱합니다.  
# 크롤링할 웹 페이지의 URL을 변수에 저장합니다.  
# 지정한 URL에 GET 요청을 보내어 응답을 받습니다.  
# 응답의 텍스트 데이터를 HTML로 해석할 수 있도록 BeautifulSoup 객체를 생성합니다.  
# HTML 문서에서 모든 <h1> 태그를 찾아 리스트로 저장합니다.  
# 찾은 <h1> 태그 목록을 반복합니다.  
# 각 <h1> 태그의 텍스트 내용을 출력합니다.  "
리스트를 배열로 변환하라.,"
import numpy as np

def create_array():
    my_list = [1, 2, 3, 4, 5]
    my_array = np.array(my_list)
    return my_array

result = create_array()
print('배열:', result)
","  
# numpy 라이브러리를 np라는 이름으로 임포트합니다.  
# 배열을 생성하는 함수를 정의합니다.  
# 정수 1부터 5까지의 요소를 가진 리스트를 만듭니다.  
# 리스트를 numpy 배열로 변환합니다.  
# 생성한 배열을 반환합니다.  
# create_array 함수를 호출하고 그 결과를 result 변수에 저장합니다.  
# 배열 내용을 출력하며 '배열:'이라는 문자열을 추가합니다.  
  "
최연소를 찾고 이름을 출력하라.,"
import pandas as pd

data = {
    '이름': ['홍길동', '김영희', '이철수'],
    '나이': [25, 30, 22],
    '성별': ['남', '여', '남']
}

df = pd.DataFrame(data)
최연소 = df[df['나이'] == df['나이'].min()]
print(최연소['이름'].values[0] + '가 최연소입니다.')
","# pandas 라이브러리를 pd라는 이름으로 가져옵니다.

# 이름, 나이, 성별로 구성된 데이터를 딕셔너리 형태로 만듭니다.

# 딕셔너리를 사용하여 pandas DataFrame 객체를 생성합니다.

# 데이터프레임에서 나이가 가장 적은 사람의 정보를 선택합니다.

# 최연소자의 이름을 출력하며 '가 최연소입니다.'라는 문구를 추가합니다."
x와 y를 시각화하라.,"
import matplotlib.pyplot as plt

def plot_data(x_values, y_values):
    plt.plot(x_values, y_values, marker='o')
    plt.title('간단한 데이터 시각화')
    plt.xlabel('X축')
    plt.ylabel('Y축')
    plt.grid(True)
    plt.show()

x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 1, 4]
plot_data(x, y)
","   
# matplotlib 라이브러리에서 pyplot을 가져옵니다.  
# plot_data라는 이름의 함수를 정의합니다.  
# x_values와 y_values를 매개변수로 받습니다.  
# 주어진 x_values와 y_values를 점(marker)으로 연결하여 그래프를 그립니다.  
# 그래프의 제목을 '간단한 데이터 시각화'로 설정합니다.  
# X축 레이블을 'X축'으로 설정합니다.  
# Y축 레이블을 'Y축'으로 설정합니다.  
# 그래프에 격자(grid)를 표시합니다.  
# 작성한 그래프를 화면에 보여줍니다.  
# x 값들을 리스트로 정의합니다.  
# y 값들을 리스트로 정의합니다.  
# 위에서 정의한 함수 plot_data를 x와 y를 인자로 호출합니다.  
  "
가상 환경 'my_env'를 생성하라.,"
import os

def create_venv(venv_name):
    os.system(f' -m venv {venv_name}')
    return f'가상 환경 ""{venv_name}""이(가) 생성되었습니다.'

venv_name = 'my_env'
result = create_venv(venv_name)
print(result)
"," 
# os 모듈을 가져와서 운영 체제와 상호작용할 수 있게 한다.

# 가상 환경을 생성하는 함수를 정의한다. 함수 이름은 create_venv이고 파라미터로 venv_name을 받는다.

# 시스템 명령어를 사용해 가상 환경을 생성한다. 입력된 venv_name을 사용한다.

# 생성된 가상 환경에 대한 메시지를 반환한다.

# 가상 환경의 이름을 'my_env'로 설정한다.

# create_venv 함수를 호출하고 그 결과를 result 변수에 저장한다.

# result 변수에 저장된 메시지를 출력하여 생성된 가상 환경 정보를 보여준다. 
"
두 숫자의 합을 구하라.,"
def add_numbers(number1, number2):
    return number1 + number2

def main():
    user_input1 = input('첫 번째 숫자를 입력하세요: ')
    user_input2 = input('두 번째 숫자를 입력하세요: ')
    result = add_numbers(int(user_input1), int(user_input2))
    print('두 숫자의 합은:', result)

main()
","  
# 두 숫자를 더하는 함수를 정의합니다.  
# 첫 번째 숫자와 두 번째 숫자를 매개변수로 받습니다.  
# 두 숫자를 더한 결과를 반환합니다.  
# 메인 함수 정의를 시작합니다.  
# 사용자에게 첫 번째 숫자를 입력하라는 메시지를 표시합니다.  
# 사용자에게 두 번째 숫자를 입력하라는 메시지를 표시합니다.  
# 입력된 숫자를 정수형으로 변환하여 add_numbers 함수를 호출합니다.  
# 두 숫자의 합을 계산하여 result 변수에 저장합니다.  
# 합계 결과를 출력합니다.  
# 메인 함수를 호출하여 프로그램을 실행합니다.  
  "
불변 딕셔너리를 생성하라.,"
from types import MappingProxyType

def create_frozen_dict():
    mutable_dict = {'apple': 1, 'banana': 2, 'orange': 3}
    frozen_dict = MappingProxyType(mutable_dict)
    return frozen_dict

frozen_dict = create_frozen_dict()
print(frozen_dict)
print(frozen_dict['apple'])
","
# MappingProxyType을 사용하기 위해 types 모듈에서 임포트합니다.

# 변경 불가능한 사전을 만들기 위한 함수를 정의합니다.

# 가변 딕셔너리를 정의합니다. 여기에는 과일 이름과 그에 대한 숫자가 저장됩니다.

# 가변 딕셔너리의 변형인 변경 불가능한 딕셔너리를 생성합니다.

# 변경 불가능한 딕셔너리를 반환합니다.

# create_frozen_dict 함수를 호출하고 결과를 frozen_dict 변수에 저장합니다.

# frozen_dict를 출력하여 딕셔너리 내용을 확인합니다.

# frozen_dict에서 'apple' 키에 대한 값을 출력합니다.
"
주어진 아이템의 조합을 생성하라.,"
import itertools

def generate_combinations(items, r):
    combinations = list(itertools.combinations(items, r))
    return combinations

items = ['사과', '바나나', '체리']
result = generate_combinations(items, 2)
print(result)
","  
# itertools 모듈을 가져와서 조합 생성을 위해 사용한다.  

# 주어진 아이템과 조합의 크기를 받아 조합을 생성하는 함수를 정의한다.  

# 주어진 아이템으로부터 크기 r의 모든 조합을 생성하여 리스트로 변환한다.  

# 생성된 조합을 반환한다.  

# 아이템 목록을 정의한다.  

# 2개의 아이템 조합을 생성하기 위해 함수를 호출한다.  

# 결과를 출력하여 생성된 조합을 확인한다.  
  "
숫자리스트의 합을 구하라.,"
from functools import reduce

def 합계리스트(숫자리스트):
    return reduce(lambda x, y: x + y, 숫자리스트)

숫자리스트 = [1, 2, 3, 4, 5]
결과 = 합계리스트(숫자리스트)
print('리스트의 합은', 결과, '입니다.')
","  
# functools 모듈에서 reduce 함수를 가져옵니다.

# 숫자 리스트의 합계를 계산하는 함수를 정의합니다.
def 합계리스트(숫자리스트):
    # reduce 함수를 사용하여 리스트의 모든 요소를 더합니다.
    return reduce(lambda x, y: x + y, 숫자리스트)

# 합계를 구할 숫자 리스트를 정의합니다.
숫자리스트 = [1, 2, 3, 4, 5]

# 합계리스트 함수를 호출하여 결과를 계산합니다.
결과 = 합계리스트(숫자리스트)

# 리스트의 합계를 출력합니다.
print('리스트의 합은', 결과, '입니다.')
  "
